#+TITLE:   The Setup
#+AUTHOR:  Lee Hinman
#+EMAIL:   leehinman@fastmail.com
#+LANGUAGE: en
#+PROPERTY: header-args :eval no :results code replace :noweb yes :tangle no
#+HTML_HEAD: <link rel="stylesheet" href="http://dakrone.github.io/org.css" type="text/css" />
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+OPTIONS: H:4 num:nil toc:t \n:nil @:t ::t |:t ^:{} -:t f:t *:t
#+OPTIONS: skip:nil d:(HIDE) tags:not-in-toc
#+TODO: SOMEDAY(s) TODO(t) INPROGRESS(i) WAITING(w@/!) NEEDSREVIEW(n@/!) | DONE(d)
#+TODO: WAITING(w@/!) HOLD(h@/!) | CANCELLED(c@/!)
#+TAGS: export(e) noexport(n)
#+STARTUP: fold nodlcheck lognotestate showall

* Introduction 
:PROPERTIES:
:CUSTOM_ID: 2daddf2c-228b-40ae-90b1-cd0b8c39f061
:END:
This file takes a page out of the book of [[http://doc.rix.si/org/fsem.html][Hardcore Freestyle Emacs]], in which a
single org-file can be tangled to create all the necessary dotfiles required for
my everyday computer usage.

This file was last exported: {{{time(%Y-%m-%d %H:%M)}}}

** How to use these files
:PROPERTIES:
:CUSTOM_ID: 6017d330-9337-4d97-82f2-2e605b7a262a
:END:

My dotfiles setup uses a slightly different setup than most peoples'.

Instead of a repo full of configuration files that people can put into place, my
setup consists of a number of [[http://orgmode.org/][org-mode]] files that contain source code in them.
Using [[https://www.gnu.org/software/emacs/][Emacs]] they are then "[[http://orgmode.org/org.html#Working-With-Source-Code][tangled]]" to produce specific files. For example, the
=zsh.org= file can be tangled to produce the =.zshenv=, =.zshrc= and other
ZSH-related configuration files.

So how would you use this?

I include the =bin/tangle= script, which invokes Emacs in such a manner to
produce the files a particular org file would produce. Generally if you want to
actually use these, you wouldn't have to do that because I provide a =Makefile=
that will perform the tangling for you. So generally you could do:

#+BEGIN_SRC sh
git clone https://github.com/dakrone/dakrone-dotfiles.git ~/dotfiles
cd ~/dotfiles
./bootstrap-packages.sh # see caveats below
make

# And then, if you wanted to symlink the files to be "installed"
make install # or `make force-install` to overwrite files
#+END_SRC

When an update is posted, I usually do:

#+BEGIN_SRC sh
cd ~/dotfiles
make
#+END_SRC

And since the installation consists of symlinks, there is no install needed.
Makefile will only regenerate the config files for files that have changes.

*** Caveat

The only caveat to this is the =bootstrap-packages.sh= file, because this
installs the files necessary for tangling, therefore it needs to be runable
directly from the repo. It can be regenerated however, from =bootstrap.org=.

* Bootstrapping machines

#+INCLUDE: bootstrap.org

* ZSH Configuration

#+INCLUDE: zsh.org

* Git Configuration

#+INCLUDE: git.org

* Tmux Configuration

#+INCLUDE: tmux.org

* Emacs Configuration

#+INCLUDE: emacs.org

* ESVM configuration

#+INCLUDE: esvm.org
