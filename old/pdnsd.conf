global {
	perm_cache=4096;
	cache_dir="/usr/local/var/cache/pdnsd";
#	pid_file = /var/run/pdnsd.pid;
	run_as="nobody";
  # I only allow localhost resolving
	server_ip=127.0.0.1;  
  # Allow the pdnsd-ctl command to get the status
	status_ctl=on;
  # This option reduces the chance of cache poisoning
  # but may make pdnsd less efficient, unfortunately.
	paranoid=on;       
  # Even a negative response should be cached
  neg_rrs_pol=on;
  # I only have 1 server section, so this is set to 1
  par_queries=1;
#	query_method=udp_tcp;
  # Retain cached entries at least 15 minutes.
	min_ttl=15m;
  # One week.
	max_ttl=1w;
#	timeout=10;        # Global timeout option (10 seconds).
#	neg_domain_pol=on;
#	udpbufsize=1024;   # Upper limit on the size of UDP messages.
#  debug=on;
}

# Google's DNS resulving service
server {
	label="google";
	ip=8.8.8.8,
     8.8.4.4;
	timeout=30;
  # Test every 30 minutes
	interval=30;
  # Test availability using ICMP echo requests
	uptest=ping;
  ping_timeout=50;
  # Don't evict things from the cache
  purge_cache=off;
  # Prevent pdnsd from full-blown resolving
  proxy_only=on;
  # Use EDNS for outgoing queries to allow UDP messages
  # larger than 512 bytes. May cause trouble with some
  # legacy systems.
	edns_query = yes;
}

source {
	owner=localhost;
#	serve_aliases=on;
	file="/etc/hosts";
}

# This section is meant for resolving from root servers.
/*
server {
	label = "root-servers";
	root_server = discover; # Query the name servers listed below
				# to obtain a full list of root servers.
	randomize_servers = on; # Give every root server an equal chance
	                        # of being queried.
	ip = 	198.41.0.4,     # This list will be expanded to the full
    		192.228.79.201; # list on start up.
	timeout = 5;
	uptest = query;         # Test availability using empty DNS queries.
#	query_test_name = .;    # To be used if remote servers ignore empty queries.
	interval = 30m;         # Test every half hour.
	ping_timeout = 300;     # Test should time out after 30 seconds.
	purge_cache = off;
	edns_query = yes;	# Use EDNS for outgoing queries to allow UDP messages
			   	# larger than 512 bytes. May cause trouble with some
			   	# legacy systems.
	exclude = .localdomain;
	policy = included;
	preset = on;
}
*/

# The following section is most appropriate if you have a fixed connection to
# the Internet and an ISP which provides good DNS servers.
/*
server {
	label= "myisp";
	ip = 2001:428::1, 2001:428::2;  # Put your ISP's DNS-server address(es) here.
#	proxy_only=on;     # Do not query any name servers beside your ISP's.
	                   # This may be necessary if you are behind some
	                   # kind of firewall and cannot receive replies
	                   # from outside name servers.
	timeout=4;         # Server timeout; this may be much shorter
			   # that the global timeout option.
	uptest=if;         # Test if the network interface is active.
	interface=en0;     # The name of the interface to check.
	interval=10m;      # Check every 10 minutes.
	purge_cache=off;   # Keep stale cache entries in case the ISP's
			   # DNS servers go offline.
	edns_query=yes;    # Use EDNS for outgoing queries to allow UDP messages
			   # larger than 512 bytes. May cause trouble with some
			   # legacy systems.
#	exclude=.thepiratebay.org,  # If your ISP censors certain names, you may
#		.thepiratebay.se,   # want to exclude them here, and provide an
#		.piratebay.org,	    # alternative server section below that will
#		.piratebay.se;	    # successfully resolve the names.
}
*/
