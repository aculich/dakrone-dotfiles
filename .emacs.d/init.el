
;; WARNING! This file is automatically generated from settings.org!
;; ANY CHANGES MADE IN THIS FILE (settings.el) WILL BE OVERWRITTEN

;; Keep track of loading time
(defconst emacs-start-time (current-time))
;; initalize all ELPA packages
(require 'package)

(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/"))
(package-initialize)
(setq package-enable-at-startup nil)
(let ((elapsed (float-time (time-subtract (current-time)
                                          emacs-start-time))))
  (message "Loaded packages in %.3fs" elapsed))

;; Dvorak nicety, regardless of loading settings
(define-key key-translation-map "\C-t" "\C-x")
;; Load setup.el, which is used to load things efficiently
;; See: https://github.com/zk-phi/setup
(load-file "~/.emacs.d/setup.el")

;;(defvar my/background 'light)
(defvar my/background 'dark)

(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-language-environment "UTF-8")
(prefer-coding-system 'utf-8)

(global-font-lock-mode t)

(setq gc-cons-threshold 20000000)

(setq echo-keystrokes 0.1)

(setq large-file-warning-threshold (* 25 1024 1024))

(transient-mark-mode t)

(setq-default indicate-empty-lines nil)
(setq-default indicate-buffer-boundaries nil)

(menu-bar-mode -1)
(when (window-system)
  (set-scroll-bar-mode 'nil)
  (mouse-wheel-mode t))
(tool-bar-mode -1)
(tooltip-mode -1)
(blink-cursor-mode -1)

(setq ring-bell-function (lambda()))
(setq inhibit-startup-message nil
      initial-major-mode 'fundamental-mode)

(line-number-mode 1)
(column-number-mode 1)

(setq read-file-name-completion-ignore-case t)

(defalias 'yes-or-no-p 'y-or-n-p)

(setq line-move-visual t)

(setq make-pointer-invisible t)

(setq-default fill-column 80)
(setq-default default-tab-width 2)
(setq-default indent-tabs-mode nil)

(setq-default find-file-visit-truename nil)

(setq require-final-newline t)

(defun my/auto-save-buffers ()
  (save-excursion
    (dolist (buffer (buffer-list))
      (set-buffer buffer)
      (when (and (buffer-file-name)
                 (buffer-modified-p)
                 (not buffer-read-only)
                 (file-writable-p (buffer-file-name)))
        (save-buffer)))))

;; interactive function to enable auto-save every 10 seconds if desired
(defun my/enable-auto-save ()
  (interactive)
  (run-with-idle-timer 10 t 'my/auto-save-buffers))

(setup "uniquify"
  (setq uniquify-buffer-name-style 'post-forward-angle-brackets))

(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-r") 'isearch-backward-regexp)
(global-set-key (kbd "M-%") 'query-replace-regexp)

(defun my/move-specified-char (arg)
  (interactive "p")
  (let ((regexp (char-to-string (read-char))))
    (cond ((and current-prefix-arg (listp current-prefix-arg))
           (re-search-backward regexp nil t))
          (t
           (forward-char 1)
           (re-search-forward regexp nil t arg)
           (backward-char 1)))))

(global-set-key (kbd "C-M-r") 'my/move-specified-char)

(setq sentence-end-double-space nil)

(defun my/cleanup-for-spaces ()
  (interactive)
  (delete-trailing-whitespace)
  (save-excursion
    (save-restriction
      (widen)
      (goto-char (point-max))
      (delete-blank-lines))))

(add-hook 'before-save-hook 'my/cleanup-for-spaces)

(setq split-height-threshold nil)
(setq split-width-threshold 180)

(whitespace-mode t)

(set-default 'indicate-empty-lines t)
(setq show-trailing-whitespace t)

(set-default 'imenu-auto-rescan t)

(random t)

(setup "grep"
  (add-to-list 'grep-find-ignored-files "*.class"))

(setq diff-switches "-u")

(add-hook 'text-mode-hook 'turn-on-auto-fill)

(setq calc-display-sci-low -5)

(defadvice kill-buffer (around kill-buffer-around-advice activate)
  (let ((buffer-to-kill (ad-get-arg 0)))
    (if (equal buffer-to-kill "*scratch*")
        (bury-buffer)
      ad-do-it)))

(put 'upcase-region 'disabled nil)
(put 'narrow-to-region 'disabled nil)

(global-auto-revert-mode 1)

(setq vc-follow-symlinks t)
(setq auto-revert-check-vc-info t)

(!case system-type
  (gnu/linux
   (progn
     (setup "notificatons")
     (defun yank-to-x-clipboard ()
       (interactive)
       (if (region-active-p)
           (progn
             (shell-command-on-region (region-beginning) (region-end) "xsel -i -b")
             (message "Yanked region to clipboard!")
             (deactivate-mark))
         (message "No region active; can't yank to clipboard!")))

     (global-set-key (kbd "C-M-w") 'yank-to-x-clipboard)
     ))
  (darwin
   (progn
     (setq ns-use-native-fullscreen nil)
     (setq insert-directory-program "gls")
     (setq dired-listing-switches "-aBhl --group-directories-first")
     (defun copy-from-osx ()
       (shell-command-to-string "/usr/bin/pbpaste"))

     (defun paste-to-osx (text &optional push)
       (let ((process-connection-type nil))
         (let ((proc (start-process "pbcopy" "*Messages*" "/usr/bin/pbcopy")))
           (process-send-string proc text)
           (process-send-eof proc))))
     (setq interprogram-cut-function 'paste-to-osx
           interprogram-paste-function 'copy-from-osx)
     )))

(setq x-select-enable-clipboard t)
;; Treat clipboard input as UTF-8 string first; compound text next, etc.
(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))

(when (file-exists-p "/mnt/ramdisk")
  (setq temporary-file-directory "/mnt/ramdisk/"))
;; saveplace
(savehist-mode 1)
(load "saveplace")
(setq-default save-place t)
;; don't create backup file
(setq backup-inhibited t
      delete-auto-save-files t)

(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

(setup-lazy
  '(eshell) "eshell"
  (defalias 'emacs 'find-file)
  (setenv "TERM" "xterm-256color")
  (setenv "PAGER" "cat"))

(setup-after "esh-opt"
  ;; (set-face-attribute 'eshell-prompt nil :foreground "turquoise1")
  (setup-expecting "em-cmpl")
  (setup-expecting "em-prompt")
  (setup-expecting "em-term"))

(setq-default ispell-program-name "aspell")
(setq ispell-personal-dictionary "~/.flydict"
      ispell-extra-args '("--sug-mode=ultra" "--ignore=3"))
(add-to-list 'ispell-skip-region-alist '("[^\000-\377]+"))

;; flyspell
(setup-lazy
  '(flyspell-mode) "flyspell"
  (define-key flyspell-mode-map (kbd "M-n") 'flyspell-goto-next-error)
  (define-key flyspell-mode-map (kbd "M-.") 'ispell-word))

(setup-lazy
  '(view-mode) "view"
  :prepare
  (setup-keybinds nil
    "C-M-n" 'View-scroll-half-page-forward
    "C-M-p" 'View-scroll-half-page-backward)

  ;; When in view-mode, the buffer is read-only:
  (setq view-read-only t)

  (defun View-goto-line-last (&optional line)
    "goto last line"
    (interactive "P")
    (goto-line (line-number-at-pos (point-max))))

  ;; less like
  (define-key view-mode-map (kbd "N") 'View-search-last-regexp-backward)
  (define-key view-mode-map (kbd "?") 'View-search-regexp-backward?)
  (define-key view-mode-map (kbd "g") 'View-goto-line)
  (define-key view-mode-map (kbd "G") 'View-goto-line-last)
  (define-key view-mode-map (kbd "b") 'View-scroll-page-backward)
  (define-key view-mode-map (kbd "f") 'View-scroll-page-forward)
  ;; vi/w3m like
  (define-key view-mode-map (kbd "h") 'backward-char)
  (define-key view-mode-map (kbd "j") 'next-line)
  (define-key view-mode-map (kbd "k") 'previous-line)
  (define-key view-mode-map (kbd "l") 'forward-char)
  (define-key view-mode-map (kbd "[") 'backward-paragraph)
  (define-key view-mode-map (kbd "]") 'forward-paragraph)
  (define-key view-mode-map (kbd "J") 'View-scroll-line-forward)
  (define-key view-mode-map (kbd "K") 'View-scroll-line-backward))

(setup-lazy
  '(doc-view-mode) "doc-view"
  (define-key doc-view-mode-map (kbd "j")
    'doc-view-next-line-or-next-page)
  (define-key doc-view-mode-map (kbd "k")
    'doc-view-previous-line-or-previous-page))

(setup-lazy
  '(dired) "dired"
  (setup-lazy
    '(dired-jump) "dired-x"
    :prepare (setup-keybinds nil "C-x C-j" 'dired-jump)
    (put 'dired-find-alternate-file 'disabled nil)
    (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file)
    (setq ls-lisp-dirs-first t)
    (setq dired-recursive-copies 'always)
    (setq dired-recursive-deletes 'always)
    (define-key dired-mode-map (kbd "C-M-u") 'dired-up-directory)
    (add-hook 'dired-mode-hook (lambda () (hl-line-mode)))))

(when (window-system)
  (setup "server"
    (unless (server-running-p)
      (server-start))))

(when (window-system)
  (setup-in-idle "recentf")
  (setup-after "recentf"
    (when (not noninteractive)
      (recentf-mode 1)
      (setq recentf-max-saved-items 200
            recentf-exclude '("/auto-install/" ".recentf" "/repos/" "/elpa/"
                              "\\.mime-example" "\\.ido.last" "COMMIT_EDITMSG"
                              ".gz")
            recentf-auto-cleanup 600))))

(setup-lazy
  '(column-marker-1) "column-marker")

(setup-lazy
  '(idle-highlight-mode) "idle-highlight-mode")

(add-hook 'prog-mode-hook
          (lambda ()
            (subword-mode t)
            (idle-highlight-mode t)))

(defun my/add-watchwords ()
  (font-lock-add-keywords
   nil '(("\\<\\(FIXME\\|TODO\\|NOCOMMIT\\)\\>"
          1 '((:foreground "#d7a3ad") (:weight bold)) t))))

(add-hook 'prog-mode-hook 'my/add-watchwords)

;; custom test locations instead of foo_test.clj, use test/foo.clj
(defun my-clojure-test-for (namespace)
  (let* ((namespace (clojure-underscores-for-hyphens namespace))
         (segments (split-string namespace "\\."))
         (before (subseq segments 0 1))
         (after (subseq segments 1))
         (test-segments (append before (list "test") after)))
    (format "%stest/%s.clj"
            (locate-dominating-file buffer-file-name "src/")
            (mapconcat 'identity test-segments "/"))))

(defun my-clojure-test-implementation-for (namespace)
  (let* ((namespace (clojure-underscores-for-hyphens namespace))
         (segments (split-string namespace "\\."))
         (before (subseq segments 0 1))
         (after (subseq segments 2))
         (impl-segments (append before after)))
    (format "%s/src/%s.clj"
            (locate-dominating-file buffer-file-name "src/")
            (mapconcat 'identity impl-segments "/"))))

(defun nrepl-popup-tip-symbol-at-point ()
  "show docs for the symbol at point -- AWESOMELY"
  (interactive)
  (popup-tip (ac-nrepl-documentation (symbol-at-point))
             :point (ac-nrepl-symbol-start-pos)
             :around t
             :scroll-bar t
             :margin t))

(setup-lazy
  '(clojure-mode) "clojure-mode"
  (add-hook
   'clojure-mode-hook
   (lambda ()
     ;; enable eldoc
     (eldoc-mode t)
     (subword-mode t)
     ;; use my test layout fns
     (setq clojure-test-for-fn 'my-clojure-test-for)
     (setq clojure-test-implementation-for-fn 'my-clojure-test-implementation-for)
     ;; compile faster
     (setq font-lock-verbose nil)
     (global-set-key (kbd "C-c t") 'clojure-jump-between-tests-and-code)
     (paredit-mode 1))))

(defun set-auto-complete-as-completion-at-point-function ()
  (setq completion-at-point-functions '(auto-complete)))

(defun setup-clojure-cider ()
  (lambda ()
    (define-key cider-mode-map (kbd "C-c C-d")
      'ac-nrepl-popup-doc)
    (paredit-mode 1)
    (setq cider-history-file "~/.nrepl-history"
          cider-hide-special-buffers t
          cider-repl-history-size 10000
          cider-popup-stacktraces-in-repl t)
    (set-auto-complete-as-completion-at-point-function)))

(setup-lazy
  '(cider-jack-in cider-mode) "cider"
  (add-hook 'cider-mode-hook 'setup-clojure-cider)
  (add-hook 'cider-repl-mode-hook 'setup-clojure-cider))

(setup-after "cider"
  (setup-expecting "ac-nrepl"
    (add-hook 'cider-mode-hook 'ac-nrepl-setup)
    (add-hook 'cider-repl-mode-hook 'ac-nrepl-setup)
    (add-hook 'auto-complete-mode-hook
              'set-auto-complete-as-completion-at-point-function)
    (add-to-list 'ac-modes 'cider-repl-mode)))

(add-hook 'sh-mode-hook
          (lambda ()
            (show-paren-mode -1)
            (setq whitespace-line-column 140)
            (flycheck-mode -1)
            (setq blink-matching-paren nil)))

(add-to-list 'auto-mode-alist '("\\.zsh$" . shell-script-mode))

(add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
(add-hook 'emacs-lisp-mode-hook (lambda () (paredit-mode 1)))
(add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
(add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)

(setup-lazy
  '(eldoc-mode) "eldoc"
  (setq eldoc-idle-delay 0.2)
  (set-face-attribute 'eldoc-highlight-function-argument nil
                      :underline t :foreground "green"
                      :weight 'bold))

(set-face-foreground 'font-lock-regexp-grouping-backslash "#ff1493")
(set-face-foreground 'font-lock-regexp-grouping-construct "#ff8c00")

(defun ielm-other-window ()
  "Run ielm on other window"
  (interactive)
  (switch-to-buffer-other-window
   (get-buffer-create "*ielm*"))
  (call-interactively 'ielm))

(define-key emacs-lisp-mode-map (kbd "C-c C-z") 'ielm-other-window)
(define-key lisp-interaction-mode-map (kbd "C-c C-z") 'ielm-other-window)

(setup-lazy
  '(elisp-slime-nav-mode) "elisp-slime-nav")

(add-hook 'emacs-lisp-mode-hook 'elisp-slime-nav-mode)
(add-hook 'lisp-interaction-mode-hook 'elisp-slime-nav-mode)

(setup-lazy '(lisp-mode) "lisp-mode"
  (add-hook 'lisp-mode (lambda () (paredit-mode 1))))

(setup-lazy
  '(python-mode) "python"
  (define-key python-mode-map (kbd "C-c C-z") 'run-python)
  (define-key python-mode-map (kbd "<backtab>") 'python-back-indent))

(setup-lazy '(jedi-mode) "jedi"
  (jedi:setup)
  (jedi:ac-setup)
  (setq jedi:setup-keys t)
  (setq jedi:complete-on-dot t)
  (define-key python-mode-map (kbd "C-c C-d") 'jedi:show-doc)
  (setq jedi:tooltip-method nil)
  (set-face-attribute 'jedi:highlight-function-argument nil
                      :foreground "green")
  (define-key python-mode-map (kbd "C-c C-l") 'jedi:get-in-function-call))

(add-hook 'python-mode-hook (lambda () (jedi-mode t)))

(setup-lazy '(ruby-mode) "ruby-mode")

(defun setup-java ()
  (interactive)
  (defconst eclipse-java-style
    '((c-basic-offset . 4)
      (c-comment-only-line-offset . (0 . 0))
      ;; the following preserves Javadoc starter lines
      (c-offsets-alist . ((inline-open . 0)
                          (topmost-intro-cont    . +)
                          (statement-block-intro . +)
                          (knr-argdecl-intro     . 5)
                          (substatement-open     . +)
                          (substatement-label    . +)
                          (label                 . +)
                          (statement-case-open   . +)
                          (statement-cont        . ++)
                          (arglist-intro  . ++)
                          (arglist-close  . ++)
                          (arglist-cont-nonempty . ++)
                          (access-label   . 0)
                          (inher-cont     . ++)
                          (func-decl-cont . ++))))
    "Eclipse Java Programming Style")

  ;; eclim things
  (setup-lazy '(eclim-mode) "eclim"
    (setq help-at-pt-display-when-idle t)
    (setq help-at-pt-timer-delay 0.1)
    (help-at-pt-set-timer)
    (setup-expecting "company-emacs-eclim"
      (company-emacs-eclim-setup)))

  ;; Malabar things
  (setup-lazy '(malabar-mode) "malabar-mode"
    (setup-after "malabar-mode"
      (setup-expecting "cedet")
      (setup-expecting "semantic"
        (load "semantic/loaddefs.el")
        (semantic-mode 1))))
  ;; Generic java stuff things
  (setq whitespace-line-column 140)
  (setup-expecting "column-marker"
    (column-marker-1 140)
    (column-marker-2 80))
  (c-add-style "ECLIPSE" eclipse-java-style)
  (customize-set-variable 'c-default-style
                          (quote ((java-mode . "eclipse")
                                  (awk-mode . "awk")
                                  (other . "gnu"))))
  (c-set-offset 'arglist-cont-nonempty '++))

(add-hook 'java-mode-hook 'setup-java)

(setup-lazy
  '(haskell-mode) "haskell-mode"
  (turn-on-haskell-doc-mode)
  (turn-on-haskell-indent)
  (ghc-init)
  ;; for auto-complete
  (add-to-list 'ac-sources 'ac-source-ghc-mod))

(defun my/c-mode-init ()
  (c-set-style "k&r")
  (c-toggle-electric-state -1)
  (define-key c-mode-map (kbd "C-c o") 'ff-find-other-file)
  (define-key c++-mode-map (kbd "C-c o") 'ff-find-other-file)
  (hs-minor-mode 1)
  (setq c-basic-offset 4))

(add-hook 'c-mode-hook #'my/c-mode-init)
(add-hook 'c++-mode-hook #'my/c-mode-init)

(defun html-mode-insert-br ()
  (interactive)
  (insert "<br />"))

(defvar html-mode-map nil "keymap used in html-mode")
(unless html-mode-map
  (setq html-mode-map (make-sparse-keymap))
  (define-key html-mode-map (kbd "C-c b") 'html-mode-insert-br))

(setup-lazy '(zencoding-mode) "zencoding-mode")
(setup-lazy '(css-mode) "css-mode")

(add-hook 'sgml-mode-hook 'zencoding-mode)
(add-hook 'html-mode-hook 'zencoding-mode)

(defalias 'javascript-generic-mode 'js-mode)
(setq-default js-auto-indent-flag nil)
(setq-default js-indent-level 2)

(setup-lazy '(tern-mode) "tern")

(add-hook 'js-mode-hook (lambda () (tern-mode t)))

(when (file-exists-p "~/src/elisp/es-mode")
  (add-to-list 'load-path "~/src/elisp/es-mode")
  (require 'es-mode)
  (require 'ob-elasticsearch)
  (setup-after "org"
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((elasticsearch . t)))))

(when (eq window-system 'ns)
  (set-fontset-font "fontset-default" 'symbol "Monaco")
  (set-default-font "Inconsolata")
  (set-face-attribute 'default nil :height 115)
  (set-face-attribute 'fixed-pitch nil :height 115))
(when (eq window-system 'mac)
  (set-fontset-font "fontset-default" 'symbol "Monaco")
  (set-default-font "Anonymous Pro")
  (set-face-attribute 'default nil :height 125))
(when (eq window-system 'x)
  ;; Font family
  (set-fontset-font "fontset-default" 'symbol "Bitstream Vera Sans Mono")
  (set-default-font "Bitstream Vera Sans Mono")
  ;; Font size
  ;; 100 is too small, 105 is too big, 103 is juuuuuust right
  (set-face-attribute 'default nil :height 90))
;; Anti-aliasing
(setq mac-allow-anti-aliasing t)

(setq ns-use-srgb-colorspace t)

;; Emacs 24.4 requires these faces to be defined :-/
(defface clojure-parens '() "")
(defface clojure-keyword '() "")
(defface clojure-braces '() "")
(defface clojure-brackets '() "")
(defface clojure-namespace '() "")
(defface clojure-java-call '() "")
(defface clojure-special '() "")
(defface clojure-double-quote '() "")

(defmacro defclojureface (name color desc &optional others)
  `(defface
     ,name '((((class color)) (:foreground ,color ,@others)))
     ,desc :group 'faces))

(defun dakrone-dark ()
  (interactive)
  (if (window-system)
      (progn
        ;; https://github.com/dakrone/dakrone-theme
        ;; (load-theme 'dakrone t)
        ;; (set-background-color "#262626")
        ;; https://github.com/cryon/subatomic
        (load-theme 'subatomic t))
    (progn
      ;; https://github.com/d11wtq/subatomic256
      ;;(load-theme 'subatomic256 t)
      (load-theme 'dakrone t)
      )))

(defun dakrone-light ()
  (interactive)
  ;; https://github.com/fniessen/emacs-leuven-theme
  (load-theme 'leuven t)
  ;;(load-theme 'flatui t)
  (defclojureface clojure-parens       "#696969"   "Clojure parens")
  (defclojureface clojure-braces       "#696969"   "Clojure braces")
  (defclojureface clojure-brackets     "#4682b4"   "Clojure brackets")
  (defclojureface clojure-keyword      "DarkCyan"  "Clojure keywords")
  (defclojureface clojure-namespace    "#c476f1"   "Clojure namespace")
  (defclojureface clojure-java-call    "#008b8b"   "Clojure Java calls")
  (defclojureface clojure-special      "#006400"   "Clojure special")
  (defclojureface clojure-double-quote "#006400"   "Clojure special")
  (if (window-system)
      (set-face-foreground 'region nil)))

;; Define faces in clojure code
(defun tweak-clojure-syntax ()
  "Tweaks syntax for Clojure-specific faces."
  (mapcar (lambda (x) (font-lock-add-keywords nil x))
          '((("#?['`]*(\\|)"       . 'clojure-parens))
            (("#?\\^?{\\|}"        . 'clojure-brackets))
            (("\\[\\|\\]"          . 'clojure-braces))
            ((":\\w+"              . 'clojure-keyword))
            (("nil\\|true\\|false\\|%[1-9]?" . 'clojure-special))
            (("(\\(\\.[^ \n)]*\\|[^ \n)]+\\.\\|new\\)\\([ )\n]\\|$\\)" 1
              'clojure-java-call)))))

;; (add-hook 'clojure-mode-hook 'tweak-clojure-syntax)

(if (eq my/background 'dark)
    (dakrone-dark)
  (dakrone-light))

(setup-lazy
  '(org-mode org-store-link org-agenda org-capture) "org"
  :prepare
  (setup-keybinds nil
    "C-c l" 'org-store-link
    "C-c a" 'org-agenda
    "C-c b" 'org-iswitchb
    "C-c c" 'org-capture)

  (require 'org-install)
  (add-hook 'org-mode-hook 'turn-on-auto-fill)
  (setq org-directory "~/org"
        org-startup-indented t
        org-startup-truncated nil
        org-return-follows-link t
        org-use-fast-todo-selection t
        org-src-fontify-natively t
        org-fontify-whole-heading-line t
        org-completion-use-ido t
        org-edit-src-content-indentation 0
        ;; Imenu should use 3 depth instead of 2
        org-imenu-depth 3
        org-agenda-start-on-weekday nil
        ;; Use sticky agenda's so they persist
        org-agenda-sticky t
        org-cycle-separator-lines 0
        org-special-ctrl-a/e t
        org-special-ctrl-k t
        org-yank-adjusted-subtrees nil
        org-src-window-setup 'current-window
        ;; Overwrite the current window with the agenda
        org-agenda-window-setup 'current-window
        org-todo-keywords
        '((sequence "TODO(t)" "STARTED(s)" "PENDING(p)" "NEEDSREVIEW(n)" "|" "DONE(d)"))
        org-todo-keyword-faces
        '(("STARTED"     . (:foreground "deep sky blue" :weight bold))
          ("DONE"        . (:foreground "SpringGreen1" :weight bold))
          ("PENDING"     . (:foreground "orange" :weight bold))
          ("NEEDSREVIEW" . (:foreground "#edd400" :weight bold)))
        org-agenda-files '("~/org/todo.org" "~/org/notes.org"
                           "~/org/journal.org" "~/org/refile.org"
                           "~/org/meetings.org")
        org-refile-targets `((,(concat "~/org/todo.org") . (:level . 1))
                             (,(concat "~/org/notes.org") . (:level . 1)))
        org-tag-alist '(("oss" . ?o) ("home" . ?h) ("work" . ?w) ("book" . ?b))
        org-capture-templates
        '(("t" "Todo" entry (file+headline "~/org/todo.org" "Unsorted")
           "* TODO %?\n")
          ("e" "ES Todo" entry (file+headline "~/org/todo.org" "Elasticsearch")
           "* TODO %? :work:\n")
          ("o" "OSS Todo" entry (file+headline "~/org/todo.org"
                                               "Open Source Software")
           "* TODO %? :oss:\n")
          ("h" "Home Todo" entry (file+headline "~/org/todo.org" "Home")
           "* TODO %? :home:\n")
          ("b" "Book Todo" entry (file+headline "~/org/todo.org" "Book")
           "* TODO %? :book:\n")
          ("n" "Notes" entry (file+headline "~/org/notes.org" "Notes")
           "* %? :NOTE:\n%U\n")
          ("j" "Journal" entry (file+datetree "~/org/journal.org")
           "* %?\n%U\n")
          ("m" "Meeting" entry (file+headline "~/org/meetings.org" "Meetings")))
        org-refile-targets (quote ((nil :maxlevel . 9)
                                   (org-agenda-files :maxlevel . 9)))
        ;; Use full outline paths for refile targets - we file directly with IDO
        org-refile-use-outline-path t
        ;; Targets complete directly with IDO
        org-outline-path-complete-in-steps nil
        ;; Allow refile to create parent tasks with confirmation
        org-refile-allow-creating-parent-nodes (quote confirm)

        ;; Use IDO for both buffer and file completion and ido-everywhere to t
        org-completion-use-ido t
        ido-everywhere t
        ido-max-directory-size 100000
        ;; Use cider as the clojure backend
        org-babel-clojure-backend 'cider
        ;; don't run stuff automatically on export
        org-export-babel-evaluate nil
        ;; always enable noweb, results as code and exporting both
        org-babel-default-header-args
        (cons '(:noweb . "yes")
              (assq-delete-all :noweb org-babel-default-header-args))
        org-babel-default-header-args
        (cons '(:exports . "both")
              (assq-delete-all :exports org-babel-default-header-args))
        ;; I don't want to be prompted on every code block evaluation
        org-confirm-babel-evaluate nil
        ;; Do not dim blocked tasks
        org-agenda-dim-blocked-tasks nil
        ;; Compact the block agenda view
        org-agenda-compact-blocks t
        ;; Custom agenda command definitions
        org-agenda-custom-commands
        (quote ((" " "Agenda"
                 ((agenda "" nil)
                  (tags-todo "-REFILE-CANCELLED-WAITING/!"
                             ((org-agenda-overriding-header "Standalone Tasks")
                              (org-agenda-sorting-strategy '(category-keep))))
                  (tags "-REFILE/"
                        ((org-agenda-overriding-header "Tasks to Archive")
                         (org-agenda-skip-function 'bh/skip-non-archivable-tasks)
                         (org-tags-match-list-sublevels nil))))
                 nil)))

        org-archive-mark-done nil
        org-archive-location "%s_archive::* Archived Tasks"
        ;; Sorting order for tasks on the agenda
        org-agenda-sorting-strategy
        (quote ((agenda habit-down time-up user-defined-up priority-down effort-up category-keep)
                (todo category-up priority-down effort-up)
                (tags category-up priority-down effort-up)
                (search category-up)))

        ;; Enable display of the time grid so we can see the marker for the current time
        org-agenda-time-grid (quote ((daily today remove-match)
                                     #("----------------" 0 16 (org-heading t))
                                     (0900 1100 1300 1500 1700)))
        org-agenda-include-diary t
        org-agenda-diary-file "~/diary"
        org-agenda-insert-diary-extract-time t
        org-agenda-repeating-timestamp-show-all t
        ;; Show all agenda dates - even if they are empty
        org-agenda-show-all-dates t
        )

  (ido-mode (quote both))

  ;; Exclude DONE state tasks from refile targets
  (defun bh/verify-refile-target ()
    "Exclude todo keywords with a done state from refile targets"
    (not (member (nth 2 (org-heading-components)) org-done-keywords)))

  (define-key org-mode-map (kbd "C-M-<return>") 'org-insert-todo-heading)
  (define-key org-mode-map (kbd "C-c t") 'org-todo)
  (define-key org-mode-map (kbd "C-M-<tab>") 'show-all)
  (define-key org-mode-map (kbd "M-G") 'org-plot/gnuplot)
  (local-unset-key (kbd "M-S-<return>"))

  (add-hook 'org-mode-hook
            (lambda ()
              (turn-on-flyspell)
              (define-key org-mode-map [C-tab] 'other-window)
              (define-key org-mode-map [C-S-tab]
                (lambda ()
                  (interactive)
                  (other-window -1)))))

  ;; org-babel stuff
  (require 'ob-clojure)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (clojure . t)
     (sh . t)
     (ruby . t)
     (python . t)
     (gnuplot . t)))

  ;; ensure this variable is defined
  (unless (boundp 'org-babel-default-header-args:sh)
    (setq org-babel-default-header-args:sh '()))

  ;; add a default shebang header argument shell scripts
  (add-to-list 'org-babel-default-header-args:sh
               '(:shebang . "#!/usr/bin/env zsh"))

  ;; add a default shebang header argument for python
  (add-to-list 'org-babel-default-header-args:python
               '(:shebang . "#!/usr/bin/env python"))

  ;; Clojure-specific org-babel stuff
  (defvar org-babel-default-header-args:clojure
    '((:results . "silent")))

  (defun org-babel-execute:clojure (body params)
    "Execute a block of Clojure code with Babel."
    (let ((result-plist
           (nrepl-send-string-sync
            (org-babel-expand-body:clojure body params) nrepl-buffer-ns))
          (result-type  (cdr (assoc :result-type params))))
      (org-babel-script-escape
       (cond ((eq result-type 'value) (plist-get result-plist :value))
             ((eq result-type 'output) (plist-get result-plist :value))
             (t (message "Unknown :results type!"))))))

  ;;; Function declarations
  (defun bh/skip-non-archivable-tasks ()
    "Skip trees that are not available for archiving"
    (save-restriction
      (widen)
      ;; Consider only tasks with done todo headings as archivable candidates
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max))))
            (subtree-end (save-excursion (org-end-of-subtree t))))
        (if (member (org-get-todo-state) org-todo-keywords-1)
            (if (member (org-get-todo-state) org-done-keywords)
                (let* ((daynr (string-to-int (format-time-string "%d" (current-time))))
                       (a-month-ago (* 60 60 24 (+ daynr 1)))
                       (last-month
                        (format-time-string
                         "%Y-%m-"
                         (time-subtract (current-time) (seconds-to-time a-month-ago))))
                       (this-month (format-time-string "%Y-%m-" (current-time)))
                       (subtree-is-current
                        (save-excursion
                          (forward-line 1)
                          (and (< (point) subtree-end)
                               (re-search-forward
                                (concat last-month "\\|" this-month)
                                subtree-end t)))))
                  (if subtree-is-current
                      subtree-end ; Has a date in this month or last month, skip it
                    nil))  ; available to archive
              (or subtree-end (point-max)))
          next-headline))))

  (defun bh/is-not-scheduled-or-deadline (date-str)
    (and (not (bh/is-deadline date-str))
         (not (bh/is-scheduled date-str))))

  (defun bh/is-due-deadline (date-str)
    (string-match "Deadline:" date-str))

  (defun bh/is-late-deadline (date-str)
    (string-match "\\([0-9]*\\) d\. ago:" date-str))

  (defun bh/is-pending-deadline (date-str)
    (string-match "In \\([^-]*\\)d\.:" date-str))

  (defun bh/is-deadline (date-str)
    (or (bh/is-due-deadline date-str)
        (bh/is-late-deadline date-str)
        (bh/is-pending-deadline date-str)))

  (defun bh/is-scheduled (date-str)
    (or (bh/is-scheduled-today date-str)
        (bh/is-scheduled-late date-str)))

  (defun bh/is-scheduled-today (date-str)
    (string-match "Scheduled:" date-str))

  (defun bh/is-scheduled-late (date-str)
    (string-match "Sched\.\\(.*\\)x:" date-str))

  (defun bh/find-project-task ()
    "Move point to the parent (project) task if any"
    (save-restriction
      (widen)
      (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
        (while (org-up-heading-safe)
          (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
            (setq parent-task (point))))
        (goto-char parent-task)
        parent-task)))

  (defun bh/is-project-p ()
    "Any task with a todo keyword subtask"
    (save-restriction
      (widen)
      (let ((has-subtask)
            (subtree-end (save-excursion (org-end-of-subtree t)))
            (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
        (save-excursion
          (forward-line 1)
          (while (and (not has-subtask)
                      (< (point) subtree-end)
                      (re-search-forward "^\*+ " subtree-end t))
            (when (member (org-get-todo-state) org-todo-keywords-1)
              (setq has-subtask t))))
        (and is-a-task has-subtask))))

  (defun bh/is-project-subtree-p ()
    "Any task with a todo keyword that is in a project subtree.
Callers of this function already widen the buffer view."
    (let ((task (save-excursion (org-back-to-heading 'invisible-ok)
                                (point))))
      (save-excursion
        (bh/find-project-task)
        (if (equal (point) task)
            nil
          t))))

  (defun bh/is-task-p ()
    "Any task with a todo keyword and no subtask"
    (save-restriction
      (widen)
      (let ((has-subtask)
            (subtree-end (save-excursion (org-end-of-subtree t)))
            (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
        (save-excursion
          (forward-line 1)
          (while (and (not has-subtask)
                      (< (point) subtree-end)
                      (re-search-forward "^\*+ " subtree-end t))
            (when (member (org-get-todo-state) org-todo-keywords-1)
              (setq has-subtask t))))
        (and is-a-task (not has-subtask)))))

  (defun bh/is-subproject-p ()
    "Any task which is a subtask of another project"
    (let ((is-subproject)
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (while (and (not is-subproject) (org-up-heading-safe))
          (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
            (setq is-subproject t))))
      (and is-a-task is-subproject)))

  (defun bh/list-sublevels-for-projects-indented ()
    "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
This is normally used by skipping functions where this variable
is already local to the agenda."
    (if (marker-buffer org-agenda-restrict-begin)
        (setq org-tags-match-list-sublevels 'indented)
      (setq org-tags-match-list-sublevels nil))
    nil)

  (defun bh/list-sublevels-for-projects ()
    "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
This is normally used by skipping functions where this variable
is already local to the agenda."
    (if (marker-buffer org-agenda-restrict-begin)
        (setq org-tags-match-list-sublevels t)
      (setq org-tags-match-list-sublevels nil))
    nil)

  (defvar bh/hide-scheduled-and-waiting-next-tasks t)

  (defun bh/toggle-next-task-display ()
    (interactive)
    (setq bh/hide-scheduled-and-waiting-next-tasks
          (not bh/hide-scheduled-and-waiting-next-tasks))
    (when  (equal major-mode 'org-agenda-mode)
      (org-agenda-redo))
    (message "%s WAITING and SCHEDULED NEXT Tasks"
             (if bh/hide-scheduled-and-waiting-next-tasks "Hide" "Show")))

  (defun bh/skip-stuck-projects ()
    "Skip trees that are not stuck projects"
    (save-restriction
      (widen)
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (if (bh/is-project-p)
            (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                   (has-next ))
              (save-excursion
                (forward-line 1)
                (while (and (not has-next)
                            (< (point) subtree-end)
                            (re-search-forward "^\\*+ NEXT " subtree-end t))
                  (unless (member "WAITING" (org-get-tags-at))
                    (setq has-next t))))
              (if has-next
                  nil
                next-headline)) ; a stuck project, has subtasks but no next task
          nil))))

  (defun bh/skip-non-stuck-projects ()
    "Skip trees that are not stuck projects"
    (bh/list-sublevels-for-projects-indented)
    (save-restriction
      (widen)
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (if (bh/is-project-p)
            (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                   (has-next ))
              (save-excursion
                (forward-line 1)
                (while (and (not has-next)
                            (< (point) subtree-end)
                            (re-search-forward "^\\*+ NEXT " subtree-end t))
                  (unless (member "WAITING" (org-get-tags-at))
                    (setq has-next t))))
              (if has-next
                  next-headline
                nil)) ; a stuck project, has subtasks but no next task
          next-headline))))

  (defun bh/skip-non-projects ()
    "Skip trees that are not projects"
    (bh/list-sublevels-for-projects-indented)
    (if (save-excursion (bh/skip-non-stuck-projects))
        (save-restriction
          (widen)
          (let ((subtree-end (save-excursion (org-end-of-subtree t))))
            (cond
             ((and (bh/is-project-p)
                   (marker-buffer org-agenda-restrict-begin))
              nil)
             ((and (bh/is-project-p)
                   (not (marker-buffer org-agenda-restrict-begin))
                   (not (bh/is-project-subtree-p)))
              nil)
             (t
              subtree-end))))
      (save-excursion (org-end-of-subtree t))))

  (defun bh/skip-project-trees-and-habits ()
    "Skip trees that are projects"
    (save-restriction
      (widen)
      (let ((subtree-end (save-excursion (org-end-of-subtree t))))
        (cond
         ((bh/is-project-p)
          subtree-end)
         ((org-is-habit-p)
          subtree-end)
         (t
          nil)))))

  (defun bh/skip-projects-and-habits-and-single-tasks ()
    "Skip trees that are projects, tasks that are habits, single non-project tasks"
    (save-restriction
      (widen)
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (cond
         ((org-is-habit-p)
          next-headline)
         ((and bh/hide-scheduled-and-waiting-next-tasks
               (member "WAITING" (org-get-tags-at)))
          next-headline)
         ((bh/is-project-p)
          next-headline)
         ((and (bh/is-task-p) (not (bh/is-project-subtree-p)))
          next-headline)
         (t
          nil)))))

  (defun bh/skip-project-tasks-maybe ()
    "Show tasks related to the current restriction.
When restricted to a project, skip project and sub project tasks,
habits, NEXT tasks, and loose tasks. When not restricted, skip
project and sub-project tasks, habits, and project related
tasks."
    (save-restriction
      (widen)
      (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
             (next-headline (save-excursion (or (outline-next-heading) (point-max))))
             (limit-to-project (marker-buffer org-agenda-restrict-begin)))
        (cond
         ((bh/is-project-p)
          next-headline)
         ((org-is-habit-p)
          subtree-end)
         ((and (not limit-to-project)
               (bh/is-project-subtree-p))
          subtree-end)
         ((and limit-to-project
               (bh/is-project-subtree-p)
               (member (org-get-todo-state) (list "NEXT")))
          subtree-end)
         (t
          nil)))))

  (defun bh/skip-projects-and-habits ()
    "Skip trees that are projects and tasks that are habits"
    (save-restriction
      (widen)
      (let ((subtree-end (save-excursion (org-end-of-subtree t))))
        (cond
         ((bh/is-project-p)
          subtree-end)
         ((org-is-habit-p)
          subtree-end)
         (t
          nil)))))

  (defun bh/skip-non-subprojects ()
    "Skip trees that are not projects"
    (let ((next-headline (save-excursion (outline-next-heading))))
      (if (bh/is-subproject-p)
          nil
        next-headline))))

(setup-after "org"
  (setq org-publish-project-alist
        '(("emacs dotfiles"
           :base-directory "~/.emacs.d/"
           :base-extension "org\\|zsh\\|html"
           :publishing-directory "/ssh:hinmanph@writequit:~/public_html/wq/paste/org/"
           :publishing-function org-html-publish-to-html
           :with-toc t
           :html-preamble t)
          ("org-pastebin"
           :base-directory "~/org/"
           :base-extension "org\\|zsh\\|html"
           :publishing-directory "/ssh:hinmanph@writequit:~/public_html/wq/paste/org/"
           :publishing-function org-html-publish-to-html
           :with-toc t
           :html-preamble t)
          ("org-pastebin-db"
           :base-directory "~/Dropbox/org/"
           :base-extension "org\\|zsh\\|html"
           :publishing-directory "/ssh:hinmanph@writequit:~/public_html/wq/paste/org/"
           :publishing-function org-html-publish-to-html
           :with-toc t
           :html-preamble t)
          ("org-es-pastebin"
           :base-directory "~/org/es/"
           :base-extension "org\\|zsh\\|html"
           :publishing-directory "/ssh:hinmanph@writequit:~/public_html/wq/paste/org/"
           :publishing-function org-html-publish-to-html
           :with-toc t
           :html-preamble t)
          ("org-es-pastebin-db"
           :base-directory "~/Dropbox/org/es/"
           :base-extension "org\\|zsh\\|html"
           :publishing-directory "/ssh:hinmanph@writequit:~/public_html/wq/paste/org/"
           :publishing-function org-html-publish-to-html
           :with-toc t
           :html-preamble t)
          ("org-book-pastebin"
           :base-directory "~/org/book/"
           :base-extension "org\\|zsh\\|html"
           :publishing-directory "/ssh:hinmanph@writequit:~/public_html/wq/paste/org/book/"
           :publishing-function org-html-publish-to-html
           :with-toc t
           :html-preamble t)
          ("org-book-pastebin-db"
           :base-directory "~/Dropbox/org/book/"
           :base-extension "org\\|zsh\\|html"
           :publishing-directory "/ssh:hinmanph@writequit:~/public_html/wq/paste/org/book/"
           :publishing-function org-html-publish-to-html
           ;; :exclude "PrivatePage.org"   ;; regexp
           ;; :headline-levels 3
           ;; :section-numbers nil
           :with-toc t
           ;; :html-head "<link rel=\"stylesheet\"
           ;;               href=\"../other/mystyle.css\" type=\"text/css\"/>"
           :html-preamble t))))

(setq tls-program
      '("openssl s_client -connect %h:%p -no_ssl2 -ign_eof -cert ~/host.pem"
        "gnutls-cli --priority secure256 --x509certfile ~/host.pem -p %p %h"
        "gnutls-cli --priority secure256 -p %p %h"))

(when window-system
  (defun start-irc ()
    "Connect to IRC."
    (interactive)
    (pause-ercn 10)
    (erc-tls :server "freenode" :port 31425
             :nick "dakrone" :password znc-pass))

  (setup-lazy '(todochiku-message) "todochiku"
    ;;------------------------------------------------------------------------
    ;; Use terminal-notifier in OS X Mountain Lion
    ;; https://github.com/alloy/terminal-notifier (Install in /Applications)
    ;;------------------------------------------------------------------------
    (setq terminal-notifier-path
          "/Users/hinmanm/.rvm/gems/ruby-1.9.3-p448/bin/terminal-notifier")

    (defadvice todochiku-get-arguments (around todochiku-nc)
      (setq ad-return-value
            (list "-title" title "-message" message "-activate" "org.gnu.Emacs")))

    (when (file-executable-p terminal-notifier-path)
      (setq todochiku-command terminal-notifier-path)
      (ad-activate 'todochiku-get-arguments)))

  ;; Only track my nick(s)
  (defadvice erc-track-find-face
      (around erc-track-find-face-promote-query activate)
    (if (erc-query-buffer-p)
        (setq ad-return-value (intern "erc-current-nick-face"))
      ad-do-it))

  (setup-lazy '(erc) "erc"
    (setq erc-fill-column 90
          erc-server-coding-system '(utf-8 . utf-8)
          erc-hide-list '("JOIN" "PART" "QUIT" "NICK")
          erc-track-exclude-types (append '("324" "329" "332" "333"
                                            "353" "477" "MODE")
                                          erc-hide-list)
          erc-nick '("dakrone" "dakrone_" "dakrone__")
          erc-autojoin-timing :ident
          erc-flood-protect nil
          erc-pals '("hiredman" "danlarkin" "drewr" "pjstadig" "scgilardi"
                     "joegallo" "jimduey" "leathekd" "zkim" "steve" "imotov"
                     "technomancy" "ddillinger" "yazirian" "danielglauser")
          erc-pal-highlight-type 'nil
          erc-keywords '("dakrone" "dakrone_" "dakrone__" "clj-http"
                         "cheshire" "clojure-opennlp" "opennlp")
          erc-ignore-list '()
          erc-track-exclude-types '("JOIN" "NICK" "PART" "QUIT" "MODE"
                                    "324" "329" "332" "333" "353" "477")
          erc-button-url-regexp
          (concat "\\([-a-zA-Z0-9_=!?#$@~`%&*+\\/:;,]+\\.\\)+[-a-zA-Z0-9_=!?#"
                  "$@~`%&*+\\/:;,]*[-a-zA-Z0-9\\/]")
          erc-log-matches-types-alist
          '((keyword . "ERC Keywords")
            (current-nick . "ERC Messages Addressed To You"))
          erc-log-matches-flag t
          erc-prompt-for-nickserv-password nil
          erc-server-reconnect-timeout 5
          erc-server-reconnect-attempts 4
          ;; update ERC prompt with room name
          erc-prompt (lambda ()
                       (if (and (boundp 'erc-default-recipients)
                                (erc-default-target))
                           (erc-propertize (concat (erc-default-target) ">")
                                           'read-only t 'rear-nonsticky t
                                           'front-nonsticky t)
                         (erc-propertize (concat "ERC>") 'read-only t
                                         'rear-nonsticky t
                                         'front-nonsticky t))))))

(setup-after "erc"
  (setup-expecting "erc-services"
    (add-to-list 'erc-modules 'spelling)
    (erc-services-mode 1)
    (erc-spelling-mode 1))
  (setup-expecting "erc-hl-nicks"
    (add-to-list 'erc-modules 'hl-nicks))
  (erc-update-modules))

(when (window-system)
  (when (file-exists-p "~/.ercpass")
    (load-file "~/.ercpass"))
  (setup-after "erc"
    (setup-lazy
      '(ercn) "ercn"
      ;; load private ercn notify rules if the file exists
      (if (file-exists-p "~/.ercrules")
          (load-file "~/.ercrules")
        (setq ercn-notify-rules
              '((message . ("#denofclojure" "#elasticsearch"))
                (current-nick . all)
                (keyword . all)
                ;;(pal . all)
                (query-buffer . all))))

      (defun do-notify (nickname message)
        (todochiku-message (buffer-name)
                           (concat nickname ": " message)
                           (todochiku-icon 'irc)))

      (add-hook 'ercn-notify 'do-notify)
      (add-to-list 'erc-modules 'ercn)

      (defvar saved-ercn-rules nil)
      (defun pause-ercn (seconds)
        (setq saved-ercn-rules ercn-notify-rules)
        (setq ercn-notify-rules
              '((current-nick . nil)
                (keyword . nil)
                (pal . nil)
                (query-buffer . nil)))
        (run-with-idle-timer
         seconds nil
         (lambda ()
           (setq ercn-notify-rules saved-ercn-rules)))))))

(defun mail ()
  (interactive)
  (add-to-list 'load-path "~/src/mu-0.9.9.5/mu4e")
  (setup-lazy '(mu4e) "mu4e"
    ;; gpg stuff
    (require 'epa-file)
    (epa-file-enable)

    ;; Various mu4e settings
    (setq mu4e-mu-binary "/usr/local/bin/mu"
          smtpmail-smtp-server "smtp.example.org"
          ;;mu4e-sent-messages-behavior 'delete
          ;; save attachments to the desktop
          mu4e-attachment-dir "~/Downloads"
          ;; attempt to show images
          mu4e-view-show-images t
          mu4e-view-image-max-width 800
          ;; start in non-queuing mode
          smtpmail-queue-mail nil
          smtpmail-queue-dir "~/.mailqueue/"
          mml2015-use 'epg
          pgg-default-user-id "3acecae0"
          epg-gpg-program "/usr/local/bin/gpg"
          message-kill-buffer-on-exit t ;; kill sent msg buffers
          ;; use msmtp
          message-send-mail-function 'message-send-mail-with-sendmail
          sendmail-program   "/usr/local/bin/msmtp"
          ;; Look at the from header to determine the account from which
          ;; to send. Might not be needed b/c of kdl-msmtp
          mail-specify-envelope-from t
          mail-envelope-from 'header
          message-sendmail-envelope-from 'header
          ;; emacs email defaults
          user-mail-address  "lee@writequit.org"
          user-full-name     "Lee Hinman"
          mail-host-address  "writequit.org"
          ;; mu4e defaults
          mu4e-maildir       "~/.mail"
          ;; misc mu settings
          ;; Unicode FTW
          mu4e-use-fancy-chars nil
          ;; use the python html2text shell command to strip html
          ;; brew/apt-get install html2text
          mu4e-html2text-command "/usr/local/bin/elinks -dump"
          ;; mu4e-html2text-command "/usr/local/bin/html2text -nobs"
          ;; mu4e-html2text-command
          ;; "/usr/bin/html2markdown | fgrep -v '&nbsp_place_holder;'"
          ;; check for new messages ever 600 seconds (10 min)
          mu4e-update-interval 600)

    (add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)
    (setup-lazy '(turn-on-gnus-dired-mode) "gnus-dired"
      ;; make the `gnus-dired-mail-buffers' function also work on
      ;; message-mode derived modes, such as mu4e-compose-mode
      (defun gnus-dired-mail-buffers ()
        "Return a list of active message buffers."
        (let (buffers)
          (save-current-buffer
            (dolist (buffer (buffer-list t))
              (set-buffer buffer)
              (when (and (derived-mode-p 'message-mode)
                         (null message-sent-message-via))
                (push (buffer-name buffer) buffers))))
          (nreverse buffers)))

      (setq gnus-dired-mail-mode 'mu4e-user-agent))

    ;; Vars used below
    (defvar kdl-mu4e-new-mail nil
      "Boolean to represent if there is new mail.")

    (defvar kdl-mu4e-url-location-list '()
      "Stores the location of each link in a mu4e view buffer")

    ;; This is also defined in init.el, but b/c ESK runs all files in the
    ;; user-dir before init.el it must also be defined here
    (defvar message-filter-regexp-list '()
      "regexps to filter matched msgs from the echo area when message is called")

    ;; Multi-account support
    (defun kdl-mu4e-current-account (&optional msg ignore-message-at-point)
      "Figure out what the current account is based on the message being
composed, the message under the point, or (optionally) the message
passed in. Also supports ignoring the msg at the point."
      (let ((cur-msg (or msg
                         mu4e-compose-parent-message
                         (and (not ignore-message-at-point)
                              (mu4e-message-at-point t)))))
        (when cur-msg
          (let ((maildir (mu4e-msg-field cur-msg :maildir)))
            (string-match "/\\(.*?\\)/" maildir)
            (match-string 1 maildir)))))

    (defun is-gmail-account? (acct)
      (if (or (equal "elasticsearch" acct) (equal "gmail" acct))
          t nil))

    ;; my elisp is bad and I should feel bad
    (defun mlh-folder-for (acct g-folder-name other-folder-name)
      (if (or (equal "elasticsearch" acct) (equal "gmail" acct))
          (format "/%s/[Gmail].%s" acct g-folder-name)
        (format "/%s/INBOX.%s" acct other-folder-name)))

    ;; Support for multiple accounts
    (setq mu4e-sent-folder   (lambda (msg)
                               (mlh-folder-for (kdl-mu4e-current-account msg)
                                               "Sent Mail" "Sent"))
          mu4e-drafts-folder (lambda (msg)
                               (mlh-folder-for (kdl-mu4e-current-account msg)
                                               "Drafts" "Drafts"))
          mu4e-trash-folder  (lambda (msg)
                               (mlh-folder-for (kdl-mu4e-current-account msg)
                                               "Trash" "Trash"))
          mu4e-refile-folder (lambda (msg)
                               (mlh-folder-for (kdl-mu4e-current-account msg)
                                               "All Mail" "Archive"))
          ;; The following list represents the account followed by key /
          ;; value pairs of vars to set when the account is chosen
          kdl-mu4e-account-alist
          '(("gmail"
             (user-mail-address   "matthew.hinman@gmail.com")
             (msmtp-account       "gmail")
             (mu4e-sent-messages-behavior delete))
            ("elasticsearch"
             (user-mail-address   "lee.hinman@elasticsearch.com")
             (msmtp-account       "elasticsearch")
             (mu4e-sent-messages-behavior delete))
            ("writequit"
             (user-mail-address   "lee@writequit.org")
             (msmtp-account       "writequit")
             (mu4e-sent-messages-behavior sent)))
          ;; These are used when mu4e checks for new messages
          mu4e-my-email-addresses
          (mapcar (lambda (acct) (cadr (assoc 'user-mail-address (cdr acct))))
                  kdl-mu4e-account-alist))

    (defun kdl-mu4e-choose-account ()
      "Prompt the user for an account to use"
      (completing-read (format "Compose with account: (%s) "
                               (mapconcat #'(lambda (var) (car var))
                                          kdl-mu4e-account-alist "/"))
                       (mapcar #'(lambda (var) (car var))
                               kdl-mu4e-account-alist)
                       nil t nil nil (caar kdl-mu4e-account-alist)))

    (defun kdl-mu4e-set-compose-account ()
      "Set various vars when composing a message. The vars to set are
  defined in kdl-mu4e-account-alist."
      (let* ((account (or (kdl-mu4e-current-account nil t)
                          (kdl-mu4e-choose-account)))
             (account-vars (cdr (assoc account kdl-mu4e-account-alist))))
        (when account-vars
          (mapc #'(lambda (var)
                    (set (car var) (cadr var)))
                account-vars))))
    (add-hook 'mu4e-compose-pre-hook 'kdl-mu4e-set-compose-account)

     ;; Send mail through msmtp (setq stuff is below)
    (defun kdl-msmtp ()
      "Add some arguments to the msmtp call in order to route the message
  through the right account."
      (if (message-mail-p)
          (save-excursion
            (let* ((from (save-restriction (message-narrow-to-headers)
                                           (message-fetch-field "from"))))
              (setq message-sendmail-extra-arguments (list "-a" msmtp-account))))))
    (add-hook 'message-send-mail-hook 'kdl-msmtp)

     ;; Notification stuff
    (setq global-mode-string
          (if (string-match-p "kdl-mu4e-new-mail"
                              (prin1-to-string global-mode-string))
              global-mode-string
            (cons
             ;;         '(kdl-mu4e-new-mail "✉" "")
             '(kdl-mu4e-new-mail "Mail" "")
             global-mode-string)))

    (defun kdl-mu4e-unread-mail-query ()
      "The query to look for unread messages in all account INBOXes.
  More generally, change this code to affect not only when the
  envelope icon appears in the modeline, but also what shows up in
  mu4e under the Unread bookmark"
      (mapconcat
       (lambda (acct)
         (let ((name (car acct)))
           (format "%s"
                   (mapconcat (lambda (fmt)
                                (format fmt name))
                              '("flag:unread AND maildir:/%s/INBOX")
                              " "))))
       kdl-mu4e-account-alist
       " OR "))

    (defun kdl-mu4e-new-mail-p ()
      "Predicate for if there is new mail or not"
      (not (eq 0 (string-to-number
                  (replace-regexp-in-string
                   "[ \t\n\r]" "" (shell-command-to-string
                                   (concat "mu find "
                                           (kdl-mu4e-unread-mail-query)
                                           " | wc -l")))))))

    (defun kdl-mu4e-notify ()
      "Function called to update the new-mail flag used in the mode-line"
      ;; This delay is to give emacs and mu a chance to have changed the
      ;; status of the mail in the index
      (run-with-idle-timer
       1 nil (lambda () (setq kdl-mu4e-new-mail (kdl-mu4e-new-mail-p)))))

    ;; I put a lot of effort (probably too much) into getting the
    ;; 'new mail' icon to go away by showing or hiding it:
    ;; - periodically (this runs even when mu4e isn't running)
    (setq kdl-mu4e-notify-timer (run-with-timer 0 500 'kdl-mu4e-notify))
    ;; - when the index is updated (this runs when mu4e is running)
    (add-hook 'mu4e-index-updated-hook 'kdl-mu4e-notify)
    ;; - after mail is processed (try to make the icon go away)
    (defadvice mu4e-mark-execute-all
        (after mu4e-mark-execute-all-notify activate) 'kdl-mu4e-notify)
    ;; - when a message is opened (try to make the icon go away)
    (add-hook 'mu4e-view-mode-hook 'kdl-mu4e-notify)
    ;; wrap lines
    (add-hook 'mu4e-view-mode-hook 'visual-line-mode)

    (defun kdl-mu4e-quit-and-notify ()
      "Bury the buffer and check for new messages. Mainly this is intended
  to clear out the envelope icon when done reading mail."
      (interactive)
      (bury-buffer)
      (kdl-mu4e-notify))

    ;; Make 'quit' just bury the buffer
    (define-key mu4e-headers-mode-map "q" 'kdl-mu4e-quit-and-notify)
    (define-key mu4e-main-mode-map "q" 'kdl-mu4e-quit-and-notify)

    ;; View mode stuff
    ;; Make it possible to tab between links
    (defun kdl-mu4e-populate-url-locations (&optional force)
      "Scans the view buffer for the links that mu4e has identified and
  notes their locations"
      (when (or (null kdl-mu4e-url-location-list) force)
        (make-local-variable 'kdl-mu4e-url-location-list)
        (let ((pt (next-single-property-change (point-min) 'face)))
          (while pt
            (when (equal (get-text-property pt 'face) 'mu4e-view-link-face)
              (add-to-list 'kdl-mu4e-url-location-list pt t))
            (setq pt (next-single-property-change pt 'face)))))
      kdl-mu4e-url-location-list)

    (defun kdl-mu4e-move-to-link (pt)
      (if pt
          (goto-char pt)
        (error "No link found.")))

    (defun kdl-mu4e-forward-url ()
      "Move the point to the beginning of the next link in the buffer"
      (interactive)
      (let* ((pt-list (kdl-mu4e-populate-url-locations)))
        (kdl-mu4e-move-to-link
         (or (some (lambda (pt) (when (> pt (point)) pt)) pt-list)
             (some (lambda (pt) (when (> pt (point-min)) pt)) pt-list)))))

    (defun kdl-mu4e-backward-url ()
      "Move the point to the beginning of the previous link in the buffer"
      (interactive)
      (let* ((pt-list (reverse (kdl-mu4e-populate-url-locations))))
        (kdl-mu4e-move-to-link
         (or (some (lambda (pt) (when (< pt (point)) pt)) pt-list)
             (some (lambda (pt) (when (< pt (point-max)) pt)) pt-list)))))

    (define-key mu4e-view-mode-map (kbd "TAB") 'kdl-mu4e-forward-url)
    (define-key mu4e-view-mode-map (kbd "<backtab>") 'kdl-mu4e-backward-url)

    ;; Misc
    ;; The bookmarks for the main screen
    (setq mu4e-bookmarks
          `((,(kdl-mu4e-unread-mail-query) "New messages"         ?b)
            ("date:today..now"             "Today's messages"     ?t)
            ("date:7d..now"                "Last 7 days"          ?W)
            ("maildir:/writequit/INBOX"    "Writequit"            ?w)
            ("subject:[elasticsearch]"     "ES Issues"            ?e)
            ("maildir:/elasticsearch/INBOX" "Elasticsearch"       ?s)
            ("maildir:/gmail/INBOX"        "Gmail"                ?g)
            ("maildir:/writequit/INBOX OR maildir:/elasticsearch/INBOX OR maildir:/gmail/INBOX"
             "All Mail" ?a)
            ("mime:image/*"                "Messages with images" ?p)))

    ;; Skip the main mu4e screen and go right to unread
    (defun kdl-mu4e-view-unread ()
      "Open the Unread bookmark directly"
      (interactive)
      (mu4e~start)
      (mu4e-headers-search-bookmark (mu4e-get-bookmark-query ?b)))

    (global-set-key (kbd "C-c 2") 'kdl-mu4e-view-unread)

    ;; Don't echo some mu4e messages
    (add-to-list 'message-filter-regexp-list "mu4e.*Indexing.*processed")
    (add-to-list 'message-filter-regexp-list "mu4e.*Retrieving mail")
    (add-to-list 'message-filter-regexp-list "mu4e.*Started")

    ;; Start it up
    (when (eq window-system 'ns)
      ;; start mu4e
      (mu4e~start)
      ;; check for unread messages
      (kdl-mu4e-notify))

    (add-to-list 'mu4e-view-actions
                 '("ViewInBrowser" . mu4e-action-view-in-browser) t)

    (define-key mu4e-view-mode-map (kbd "j") 'next-line)
    (define-key mu4e-view-mode-map (kbd "k") 'previous-line)

    (define-key mu4e-headers-mode-map (kbd "J") 'mu4e~headers-jump-to-maildir)
    (define-key mu4e-headers-mode-map (kbd "j") 'next-line)
    (define-key mu4e-headers-mode-map (kbd "k") 'previous-line)

    (when (eq my/background 'light)
      (set-face-background 'mu4e-header-highlight-face "#e0e0e0")))

  (global-set-key (kbd "C-c m") 'mu4e))

;; (setup "key-chord"
;;   (key-chord-mode 1))

(setup-lazy '(ace-jump-mode ace-jump-line-mode) "ace-jump-mode"
  :prepare (setup-keybinds nil
             "C-c SPC" 'ace-jump-mode
             "C-c M-SPC" 'ace-jump-line-mode))

(setup-after "key-chord"
  (setup-expecting "ace-jump-mode"
    (key-chord-define-global "kj" 'ace-jump-mode)))

(setup "smooth-scrolling"
  (setq smooth-scroll-margin 4))

(setup-lazy
  '(yas-minor-mode yas-minor-mode-on) "yasnippet"
  (yas-reload-all))

(add-hook 'emacs-lisp-mode-hook 'yas-minor-mode-on)
(add-hook 'org-mode-hook 'yas-minor-mode-on)
(add-hook 'clojure-mode-hook 'yas-minor-mode-on)

(setup-after "helm-config"
  (setup-expecting "yasnippet"
    (defun my-yas/prompt (prompt choices &optional display-fn)
      (let* ((names (loop for choice in choices
                          collect (or (and display-fn
                                           (funcall display-fn choice))
                                      coice)))
             (selected (helm-other-buffer
                        `(((name . ,(format "%s" prompt))
                           (candidates . names)
                           (action . (("Insert snippet" . (lambda (arg)
                                                            arg))))))
                        "*helm yas/prompt*")))
        (if selected
            (let ((n (position selected names :test 'equal)))
              (nth n choices))
          (signal 'quit "user quit!"))))
    (custom-set-variables '(yas/prompt-functions '(my-yas/prompt)))
    (global-set-key (kbd "M-=") 'yas/insert-snippet)))

(setup-lazy
  '(paredit-mode) "paredit"
  (define-key paredit-mode-map (kbd "M-)") 'paredit-forward-slurp-sexp)
  (define-key paredit-mode-map (kbd "C-(") 'paredit-forward-barf-sexp)
  (define-key paredit-mode-map (kbd "C-)") 'paredit-forward-slurp-sexp)
  (define-key paredit-mode-map (kbd ")") 'paredit-close-parenthesis))

(setup-lazy
  '(smartparens-mode) "smartparens"
  (add-hook 'sh-mode-hook
            (lambda ()
              ;; Remove when https://github.com/Fuco1/smartparens/issues/257
              ;; is fixed
              (setq sp-autoescape-string-quote nil)))

  ;; Remove the M-<backspace> binding that smartparens adds
  (let ((disabled '("M-<backspace>")))
    (setq sp-smartparens-bindings
          (cl-remove-if (lambda (key-command)
                          (member (car key-command) disabled))
                        sp-smartparens-bindings)))

  (define-key sp-keymap (kbd "C-(") 'sp-forward-barf-sexp)
  (define-key sp-keymap (kbd "C-)") 'sp-forward-slurp-sexp)
  (define-key sp-keymap (kbd "M-(") 'sp-forward-barf-sexp)
  (define-key sp-keymap (kbd "M-)") 'sp-forward-slurp-sexp)
  (define-key sp-keymap (kbd "C-M-f") 'sp-forward-sexp)
  (define-key sp-keymap (kbd "C-M-b") 'sp-backward-sexp)
  (define-key sp-keymap (kbd "C-M-f") 'sp-forward-sexp)
  (define-key sp-keymap (kbd "C-M-b") 'sp-backward-sexp)
  (define-key sp-keymap (kbd "C-M-d") 'sp-down-sexp)
  (define-key sp-keymap (kbd "C-M-a") 'sp-backward-down-sexp)
  (define-key sp-keymap (kbd "C-S-a") 'sp-beginning-of-sexp)
  (define-key sp-keymap (kbd "C-S-d") 'sp-end-of-sexp)
  (define-key sp-keymap (kbd "C-M-e") 'sp-up-sexp)
  (define-key emacs-lisp-mode-map (kbd ")") 'sp-up-sexp)
  (define-key sp-keymap (kbd "C-M-u") 'sp-backward-up-sexp)
  (define-key sp-keymap (kbd "C-M-t") 'sp-transpose-sexp)
  ;; (define-key sp-keymap (kbd "C-M-n") 'sp-next-sexp)
  ;; (define-key sp-keymap (kbd "C-M-p") 'sp-previous-sexp)
  (define-key sp-keymap (kbd "C-M-k") 'sp-kill-sexp)
  (define-key sp-keymap (kbd "C-M-w") 'sp-copy-sexp)
  (define-key sp-keymap (kbd "M-D") 'sp-splice-sexp)
  (define-key sp-keymap (kbd "C-]") 'sp-select-next-thing-exchange)
  (define-key sp-keymap (kbd "C-<left_bracket>") 'sp-select-previous-thing)
  (define-key sp-keymap (kbd "C-M-]") 'sp-select-next-thing)
  (define-key sp-keymap (kbd "M-F") 'sp-forward-symbol)
  (define-key sp-keymap (kbd "M-B") 'sp-backward-symbol)
  (define-key sp-keymap (kbd "H-t") 'sp-prefix-tag-object)
  (define-key sp-keymap (kbd "H-p") 'sp-prefix-pair-object)
  (define-key sp-keymap (kbd "H-s c") 'sp-convolute-sexp)
  (define-key sp-keymap (kbd "H-s a") 'sp-absorb-sexp)
  (define-key sp-keymap (kbd "H-s e") 'sp-emit-sexp)
  (define-key sp-keymap (kbd "H-s p") 'sp-add-to-previous-sexp)
  (define-key sp-keymap (kbd "H-s n") 'sp-add-to-next-sexp)
  (define-key sp-keymap (kbd "H-s j") 'sp-join-sexp)
  (define-key sp-keymap (kbd "H-s s") 'sp-split-sexp)

  (sp-local-pair 'minibuffer-inactive-mode "'" nil :actions nil)
  ;; Remove '' pairing in elisp because quoting is used a ton
  (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil)

  (sp-with-modes '(html-mode sgml-mode)
    (sp-local-pair "<" ">"))

  (sp-with-modes sp--lisp-modes
    (sp-local-pair "(" nil :bind "C-(")))

(add-hook 'prog-mode-hook
          (lambda ()
            (setup-after "smartparens"
              (setup-expecting "smartparens-config"))
            (smartparens-global-mode t)
            (show-smartparens-global-mode t)))

(setup-lazy
  '(flycheck-mode) "flycheck"
  (add-hook 'after-init-hook #'global-flycheck-mode)
  ;; disable the annoying doc checker
  (setq-default flycheck-disabled-checkers
                '(emacs-lisp-checkdoc)))

(setup-after "flycheck"
  (setup-expecting "flycheck-tip"
    (add-hook 'flycheck-mode-hook
              (lambda ()
                (global-set-key (kbd "C-c C-n") 'flycheck-tip-cycle)
                (global-set-key (kbd "C-c C-p") 'flycheck-tip-cycle-reverse)))))

(setup-lazy
  '(er/expand-region er/contract-region) "expand-region"
  :prepare (setup-keybinds nil
             "C-c e" 'er/expand-region
             "C-M-@" 'er/contract-region))

(setup-lazy
  '(magit magit-status) "magit"
  :prepare (setup-keybinds nil "M-g M-g" 'magit-status)

  (defun magit-browse ()
  (interactive)
  (let ((url (with-temp-buffer
               (unless (zerop (call-process-shell-command "git remote -v" nil t))
                 (error "Failed: 'git remote -v'"))
               (goto-char (point-min))
               (when (re-search-forward "github\\.com[:/]\\(.+?\\)\\.git" nil t)
                 (format "https://github.com/%s" (match-string 1))))))
    (unless url
      (error "Can't find repository URL"))
    (browse-url url)))

  (define-key magit-mode-map (kbd "C-c C-b") 'magit-browse)
  (define-key magit-status-mode-map (kbd "W") 'magit-toggle-whitespace)
  ;; faces
  ;; (set-face-attribute 'magit-branch nil
  ;;                     :foreground "yellow" :weight 'bold :underline t)
  ;; (add-hook 'magit-mode-hook
  ;;           (lambda ()
  ;;             (set-face-attribute 'magit-item-highlight nil
  ;;                                 :background "#262626")))
  (custom-set-variables '(magit-set-upstream-on-push (quote dontask))))

(setup-lazy
  '(projectile-mode projectile-find-file projectile-switch-project) "projectile"
  :prepare (setup-keybinds nil
             "C-x f" 'projectile-find-file
             "C-c p s" 'projectile-switch-project)
  (projectile-global-mode)
  (defconst projectile-mode-line-lighter " P"))

(setup-lazy
  '(prodigy) "prodigy"
  :prepare (setup-keybinds nil "C-x P" 'prodigy)
  (prodigy-define-service
    :name "Elasticsearch 1.1.0"
    :cwd "~/esi/elasticsearch-1.1.0/"
    :command "~/esi/elasticsearch-1.1.0/bin/elasticsearch"
    :tags '(work test es)
    :port 9200)

  (prodigy-define-service
    :name "Elasticsearch 0.90.12"
    :cwd "~/esi/elasticsearch-0.90.12/"
    :command "~/esi/elasticsearch-0.90.12/bin/elasticsearch"
    :args '("-f")
    :tags '(work test es)
    :port 9200)

  (prodigy-define-service
    :name "Elasticsearch 1.0.2"
    :cwd "~/esi/elasticsearch-1.0.2/"
    :command "~/esi/elasticsearch-1.0.2/bin/elasticsearch"
    :tags '(work test es)
    :port 9200))

(setup-lazy
  '(git-gutter-mode) "git-gutter"
  :prepare (setup-keybinds nil
             "C-x C-a" 'git-gutter:toggle
             "C-x =" 'git-gutter:popup-hunk
             "C-c P" 'git-gutter:previous-hunk
             "C-c N" 'git-gutter:next-hunk
             "C-x p" 'git-gutter:previous-hunk
             "C-x n" 'git-gutter:next-hunk
             "C-c G" 'git-gutter:popup-hunk))

(add-hook 'prog-mode-hook (lambda () (git-gutter-mode t)))

(setup-lazy
  '(highlight-simbol-next highlight-symbol-prev) "highlight-symbol"
  :prepare (setup-keybinds nil
             "M-n" 'highlight-symbol-next
             "M-p" 'highlight-symbol-prev))

(setup-lazy
  '(anzu-mode anzu-query-replace-regexp) "anzu"
  :prepare (setup-keybinds nil
             "M-%" 'anzu-query-replace-regexp)
  (setq anzu-mode-lighter "")
  (set-face-attribute 'anzu-mode-line nil :foreground "yellow"))

(setup-after "anzu"
  (setup-expecting "thingatpt"))

(add-hook 'prog-mode-hook (lambda () (global-anzu-mode t)))

(defun isearch-yank-symbol ()
  (interactive)
  (isearch-yank-internal (lambda () (forward-symbol 1) (point))))

(define-key isearch-mode-map (kbd "C-M-w") 'isearch-yank-symbol)

(setup "easy-kill"
  (global-set-key [remap kill-ring-save] 'easy-kill))

(setup-lazy
  '(helm) "helm"
  :prepare
  (setup-keybinds nil
    "C-M-z" 'helm-resume
    "C-h b" 'helm-descbinds
    "C-x C-r" 'helm-recentf
    "C-x M-o" 'helm-occur
    "C-x C-o" 'helm-occur
    "M-y" 'helm-show-kill-ring
    "C-h a" 'helm-apropos
    "C-h m" 'helm-man-woman
    "M-g >" 'helm-ag-this-file
    "M-g ," 'helm-ag-pop-stack
    "M-g ." 'helm-ag
    "C-x C-i" 'helm-imenu
    "C-c h" 'helm-mini
    "C-c M-x" 'helm-M-x
    "C-x C-b" 'helm-buffers-list
    "C-x C-r" 'helm-recentf)
  (require 'helm-config)
  (setq helm-idle-delay 0.1
        helm-input-idle-delay 0
        helm-candidate-number-limit 500)
  (define-key helm-map (kbd "C-p")   'helm-previous-line)
  (define-key helm-map (kbd "C-n")   'helm-next-line)
  (define-key helm-map (kbd "C-M-n") 'helm-next-source)
  (define-key helm-map (kbd "C-M-p") 'helm-previous-source)

  (defvar helm-httpstatus-source
    '((name . "HTTP STATUS")
      (candidates . (("100 Continue") ("101 Switching Protocols")
                     ("102 Processing") ("200 OK")
                     ("201 Created") ("202 Accepted")
                     ("203 Non-Authoritative Information") ("204 No Content")
                     ("205 Reset Content") ("206 Partial Content")
                     ("207 Multi-Status") ("208 Already Reported")
                     ("300 Multiple Choices") ("301 Moved Permanently")
                     ("302 Found") ("303 See Other")
                     ("304 Not Modified") ("305 Use Proxy")
                     ("307 Temporary Redirect") ("400 Bad Request")
                     ("401 Unauthorized") ("402 Payment Required")
                     ("403 Forbidden") ("404 Not Found")
                     ("405 Method Not Allowed") ("406 Not Acceptable")
                     ("407 Proxy Authentication Required") ("408 Request Timeout")
                     ("409 Conflict") ("410 Gone")
                     ("411 Length Required") ("412 Precondition Failed")
                     ("413 Request Entity Too Large")
                     ("414 Request-URI Too Large")
                     ("415 Unsupported Media Type")
                     ("416 Request Range Not Satisfiable")
                     ("417 Expectation Failed") ("418 I'm a teapot")
                     ("422 Unprocessable Entity") ("423 Locked")
                     ("424 Failed Dependency") ("425 No code")
                     ("426 Upgrade Required") ("428 Precondition Required")
                     ("429 Too Many Requests")
                     ("431 Request Header Fields Too Large")
                     ("449 Retry with") ("500 Internal Server Error")
                     ("501 Not Implemented") ("502 Bad Gateway")
                     ("503 Service Unavailable") ("504 Gateway Timeout")
                     ("505 HTTP Version Not Supported")
                     ("506 Variant Also Negotiates")
                     ("507 Insufficient Storage") ("509 Bandwidth Limit Exceeded")
                     ("510 Not Extended")
                     ("511 Network Authentication Required")))
      (action . message)))

  (defvar helm-clj-http-source
    '((name . "clj-http options")
      (candidates
       .
       ((":accept - keyword for content type to accept")
        (":as - output coercion: :json, :json-string-keys, :clojure, :stream, :auto or string")
        (":basic-auth - string or vector of basic auth creds")
        (":body - body of request")
        (":body-encoding - encoding type for body string")
        (":client-params - apache http client params")
        (":coerce - when to coerce response body: :always, :unexceptional, :exceptional")
        (":conn-timeout - timeout for connection")
        (":connection-manager - connection pooling manager")
        (":content-type - content-type for request")
        (":cookie-store - CookieStore object to store/retrieve cookies")
        (":cookies - map of cookie name to cookie map")
        (":debug - boolean to print info to stdout")
        (":debug-body - boolean to print body debug info to stdout")
        (":decode-body-headers - automatically decode body headers")
        (":decompress-body - whether to decompress body automatically")
        (":digest-auth - vector of digest authentication")
        (":follow-redirects - boolean whether to follow HTTP redirects")
        (":form-params - map of form parameters to send")
        (":headers - map of headers")
        (":ignore-unknown-host? - whether to ignore inability to resolve host")
        (":insecure? - boolean whether to accept invalid SSL certs")
        (":json-opts - map of json options to be used for form params")
        (":keystore - file path to SSL keystore")
        (":keystore-pass - password for keystore")
        (":keystore-type - type of SSL keystore")
        (":length - manually specified length of body")
        (":max-redirects - maximum number of redirects to follow")
        (":multipart - vector of multipart options")
        (":oauth-token - oauth token")
        (":proxy-host - hostname of proxy server")
        (":proxy-ignore-hosts - set of hosts to ignore for proxy")
        (":proxy-post - port for proxy server")
        (":query-params - map of query parameters")
        (":raw-headers - boolean whether to return raw headers with response")
        (":response-interceptor - function called for each redirect")
        (":retry-handler - function to handle HTTP retries on IOException")
        (":save-request? - boolean to return original request with response")
        (":socket-timeout - timeout for establishing socket")
        (":throw-entire-message? - whether to throw the entire response on errors")
        (":throw-exceptions - boolean whether to throw exceptions on 5xx & 4xx")
        (":trust-store - file path to trust store")
        (":trust-store-pass - password for trust store")
        (":trust-store-type - type of trust store")))
      (action . message)))

  (defun helm-httpstatus ()
    (interactive)
    (helm-other-buffer '(helm-httpstatus-source) "*helm httpstatus*"))

  (defun helm-clj-http ()
    (interactive)
    (helm-other-buffer '(helm-clj-http-source) "*helm clj-http flags*"))

  (global-set-key (kbd "C-c M-C-h") 'helm-httpstatus)
  (global-set-key (kbd "C-c M-h") 'helm-clj-http))

(setup-after "helm"
  (setup-expecting "helm-descbinds"
    (helm-descbinds-mode t))
  (setup-expecting "helm-ag"
    (bind-key "C-M-s" 'helm-ag-this-file)))

(setup-after "helm"
  (setup-lazy
    '(helm-swoop) "helm-swoop"
    :prepare
    (progn
      (setup-keybinds nil
        "M-i" 'helm-swoop
        "M-I" 'helm-swoop-back-to-last-point
        "C-c M-i" 'helm-multi-swoop
        "C-x M-i" 'helm-multi-swoop-all)
      (setup-keybinds isearch-mode-map
        "M-i" 'helm-swoop-from-isearch))
    ;; When doing isearch, hand the word over to helm-swoop
    (define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)
    ;; From helm-swoop to helm-multi-swoop-all
    (define-key helm-swoop-map (kbd "M-i") 'helm-multi-swoop-all-from-helm-swoop)
    ;; Save buffer when helm-multi-swoop-edit complete
    (setq helm-multi-swoop-edit-save t
          ;; If this value is t, split window inside the current window
          helm-swoop-split-with-multiple-windows nil
          ;; Split direcion. 'split-window-vertically or 'split-window-horizontally
          helm-swoop-split-direction 'split-window-vertically
          ;; If nil, you can slightly boost invoke speed in exchange for text color
          helm-swoop-speed-or-color nil)))

(setup-lazy '(markdown-mode) "markdown-mode"
  (add-to-list 'auto-mode-alist '("\\.\\(md\\|mdt\\|mdwn\\)$" . markdown-mode))

  (setq markdown-command "Markdown.pl")

  ;; key bindings
  (define-key markdown-mode-map (kbd "C-M-f") 'forward-symbol)
  (define-key markdown-mode-map (kbd "C-M-b") 'backward-symbol)
  (define-key markdown-mode-map (kbd "C-M-u") 'my/backward-up-list)

  (define-key markdown-mode-map (kbd "C-c C-n") 'outline-next-visible-heading)
  (define-key markdown-mode-map (kbd "C-c C-p") 'outline-previous-visible-heading)
  (define-key markdown-mode-map (kbd "C-c C-f") 'outline-forward-same-level)
  (define-key markdown-mode-map (kbd "C-c C-b") 'outline-backward-same-level)
  (define-key markdown-mode-map (kbd "C-c C-u") 'outline-up-heading)

  ;; Make fixed-width parts of markdown be in fixed width font
  ;; (mapc
  ;;  (lambda (face)
  ;;    (set-face-attribute
  ;;     face nil
  ;;     :inherit
  ;;     (my-adjoin-to-list-or-symbol
  ;;      'fixed-pitch
  ;;      (face-attribute face :inherit))))
  ;;  (list 'markdown-pre-face 'markdown-inline-code-face))

  (defvar markdown-imenu-generic-expression
    '(("title"  "^\\(.+?\\)[\n]=+$" 1)
      ("h2-"    "^\\(.+?\\)[\n]-+$" 1)
      ("h1"   "^#\\s-+\\(.+?\\)$" 1)
      ("h2"   "^##\\s-+\\(.+?\\)$" 1)
      ("h3"   "^###\\s-+\\(.+?\\)$" 1)
      ("h4"   "^####\\s-+\\(.+?\\)$" 1)
      ("h5"   "^#####\\s-+\\(.+?\\)$" 1)
      ("h6"   "^######\\s-+\\(.+?\\)$" 1)
      ("fn"   "^\\[\\^\\(.+?\\)\\]" 1) )))

;; (use-package auto-complete
;;   :disabled t
;;   :defer t
;;   :init (progn
;;           (use-package popup)
;;           (use-package fuzzy)
;;           (use-package auto-complete-config)
;;           ;; Enable auto-complete mode other than default enable modes
;;           (add-to-list 'ac-modes 'cider-repl-mode)
;;           (global-auto-complete-mode t)
;;           (ac-config-default))
;;   :config
;;   (progn
;;     (define-key ac-complete-mode-map (kbd "M-n") 'ac-next)
;;     (define-key ac-complete-mode-map (kbd "M-p") 'ac-previous)
;;     (define-key ac-complete-mode-map (kbd "C-s") 'ac-isearch)
;;     (define-key ac-completing-map (kbd "<tab>") 'ac-complete)))

(setup-lazy
  '(company-mode) "company"
  ;; Tiny delay before completion
  (setq company-idle-delay 0.2
        ;; min prefix of 3 chars
        company-minimum-prefix-length 3))

(add-hook 'prog-mode-hook 'global-company-mode)

(setup "smart-tab"
  (add-hook 'prog-mode-hook
            (lambda ()
              (global-smart-tab-mode 1)
              (add-to-list 'smart-tab-disabled-major-modes 'mu4e-compose-mode)
              (add-to-list 'smart-tab-disabled-major-modes 'erc-mode)
              (add-to-list 'smart-tab-disabled-major-modes 'shell-mode))))

(setup "undo-tree"
  (global-undo-tree-mode))

(setup-after "undo-tree"
  (define-key undo-tree-map (kbd "C-x u") 'undo-tree-visualize)
  (define-key undo-tree-map (kbd "C-/") 'undo-tree-undo))

(setup-lazy
  '(popwin-mode) "popwin"
  :prepare (setup-keybinds nil "C-'" 'popwin:keymap)

  (defvar popwin:special-display-config-backup popwin:special-display-config)
  (setq display-buffer-function 'popwin:display-buffer)

  ;; basic
  (push '("*Help*" :stick t :noselect t) popwin:special-display-config)

  ;; magit
  (push '("*magit-process*" :stick t) popwin:special-display-config)

  ;; quickrun
  (push '("*quickrun*" :stick t) popwin:special-display-config)

  ;; dictionaly
  (push '("*dict*" :stick t) popwin:special-display-config)
  (push '("*sdic*" :stick t) popwin:special-display-config)

  ;; popwin for slime
  (push '(slime-repl-mode :stick t) popwin:special-display-config)

  ;; man
  (push '(Man-mode :stick t :height 20) popwin:special-display-config)

  ;; Elisp
  (push '("*ielm*" :stick t) popwin:special-display-config)
  (push '("*eshell pop*" :stick t) popwin:special-display-config)

  ;; pry
  (push '(inf-ruby-mode :stick t :height 20) popwin:special-display-config)

  ;; python
  (push '("*Python*"   :stick t) popwin:special-display-config)
  (push '("*Python Help*" :stick t :height 20) popwin:special-display-config)
  (push '("*jedi:doc*" :stick t :noselect t) popwin:special-display-config)

  ;; Haskell
  (push '("*haskell*" :stick t) popwin:special-display-config)
  (push '("*GHC Info*") popwin:special-display-config)

  ;; sgit
  (push '("*sgit*" :position right :width 0.5 :stick t)
        popwin:special-display-config)

  ;; git-gutter
  (push '("*git-gutter:diff*" :width 0.5 :stick t)
        popwin:special-display-config)

  ;; direx
  (push '(direx:direx-mode :position left :width 40 :dedicated t)
        popwin:special-display-config)

  (push '("*Occur*" :stick t) popwin:special-display-config)

  ;; prodigy
  (push '("*prodigy*" :stick t) popwin:special-display-config)

  ;; malabar-mode
  (push '("*Malabar Compilation*" :stick t :height 30)
        popwin:special-display-config)

  ;; org-mode
  (push '("*Org tags*" :stick t :height 30)
        popwin:special-display-config))

(setup "paren-face"
  (global-paren-face-mode))

(setup "ido"
  (ido-mode 1)
  (setq ido-use-virtual-buffers nil
      ido-enable-prefix nil
      ido-enable-flex-matching t
      ido-auto-merge-work-directories-length nil
      ido-create-new-buffer 'always
      ido-use-filename-at-point 'guess
      ido-max-prospects 10))

(setup-after "ido"
  (setup-expecting "flx-ido"
    (flx-ido-mode 1)
    (setq ido-use-faces nil)))

(setup-after "ido"
  (setup-expecting "ido-ubiquitous"))

(setup-after "ido"
  (setup "ido-vertical-mode"
    (ido-vertical-mode t)))

(setup-lazy '(multiple-cursors-mode) "multiple-cursors"
  :prepare (setup-keybinds nil
             "C-S-c C-S-c" 'mc/edit-lines
             "C->" 'mc/mark-next-like-this
             "C-<" 'mc/mark-previous-like-this
             "C-c C-<" 'mc/mark-all-like-this))

(setup-lazy
  '(twit twittering-mode) "twittering-mode"
  (setq twittering-icon-mode t
        twittering-use-master-password t))

(setup-lazy
  '(scpaste scpaste-region scpaste-index) "scpaste"
  (setq scpaste-http-destination "http://p.writequit.org"
        scpaste-scp-destination "writequit:public_html/wq/paste/"))

(setup-lazy
  '(smex smex-major-mode-commands) "smex"
  :prepare
  (setup-keybinds nil
    "M-x" (lambda ()
            (interactive)
            (or (boundp 'smex-cache)
                (smex-initialize))
            (global-set-key [(meta x)] 'smex)
            (smex))
    "M-X" (lambda ()
            (interactive)
            (or (boundp 'smex-cache)
                (smex-initialize))
            (global-set-key [(shift meta x)] 'smex-major-mode-commands)
            (smex-major-mode-commands))))

(setup-lazy '(color-identifiers-mode) "color-identifiers-mode")

(add-hook 'prog-mode-hook (lambda () (color-identifiers-mode t)))

(setup-lazy
  '(iedit-mode) "iedit"
  :prepare (setup-keybinds nil "C-;" 'iedit-mode))

(setup-lazy
  '(hs-minor-mode) "hideshow"
  (define-key hs-minor-mode-map (kbd "C-c TAB") 'hs-toggle-hiding)
  (defvar hs-special-modes-alist
    (mapcar 'purecopy
            '((c-mode "{" "}" "/[*/]" nil nil)
              (c++-mode "{" "}" "/[*/]" nil nil)
              (bibtex-mode ("@\\S(*\\(\\s(\\)" 1))
              (java-mode "{" "}" "/[*/]" nil nil)
              (js-mode "{" "}" "/[*/]" nil)
              (javascript-mode  "{" "}" "/[*/]" nil)))))

(add-hook 'javascript-mode-hook
            '(lambda ()
               (hs-minor-mode t)
               (define-key hs-minor-mode-map (kbd "C-c TAB") 'hs-toggle-hiding)))

(add-hook 'js-mode-hook
            '(lambda ()
               (hs-minor-mode t)
               (define-key hs-minor-mode-map (kbd "C-c TAB") 'hs-toggle-hiding)))

(setup "smart-mode-line")

(setup-after "smart-mode-line"
  (setq sml/mode-width 'full)
  (sml/setup)
  (sml/apply-theme my/background))

(global-set-key (kbd "C-h e") 'popwin:messages)
(global-set-key (kbd "C-h C-p") 'popwin:special-display-config)
(global-set-key (kbd "C-x f") 'projectile-find-file)
(global-set-key (kbd "C-x +") 'balance-windows-area)

;; M-g mapping
(global-set-key (kbd "M-g M-f") 'ffap)

(global-set-key (kbd "C-x C-l") 'toggle-truncate-lines)

;; join on killing lines
(defun kill-and-join-forward (&optional arg)
  "If at end of line, join with following; otherwise kill line.
Deletes whitespace at join."
  (interactive "P")
  (if (and (eolp) (not (bolp)))
      (delete-indentation t)
    (kill-line arg)))

(global-set-key (kbd "C-k") 'kill-and-join-forward)

(global-set-key (kbd "M-g M-n") 'flycheck-next-error)
(global-set-key (kbd "M-g M-p") 'flycheck-prev-error)

;; You know, like Readline.
(global-set-key (kbd "C-M-h") 'backward-kill-word)

;; Completion that uses many different methods to find options.
(global-set-key (kbd "M-/") 'hippie-expand)

;; Perform general cleanup.
(global-set-key (kbd "C-c n") 'cleanup-buffer)

;; Font size
(define-key global-map (kbd "C-+") 'text-scale-increase)
(define-key global-map (kbd "C--") 'text-scale-decrease)

;; Use regex searches by default.
(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "\C-r") 'isearch-backward-regexp)

(global-set-key (kbd "C-c y") 'bury-buffer)
(global-set-key (kbd "C-c r") 'revert-buffer)

;; Start eshell or switch to it if it's active.
(global-set-key (kbd "C-x m") 'eshell)

;; Start a new eshell even if one is active.
(global-set-key (kbd "C-x M") (lambda () (interactive) (eshell t)))

;; Start a regular shell if you prefer that.
(global-set-key (kbd "C-x C-m") 'shell)

;; If you want to be able to M-x without meta (phones, etc)
(global-set-key (kbd "C-c C-x") 'execute-extended-command)

;; So good!
(global-set-key (kbd "C-c g") 'magit-status)

;; Activate occur easily inside isearch
(define-key isearch-mode-map (kbd "C-o")
  (lambda () (interactive)
    (let ((case-fold-search isearch-case-fold-search))
      (occur (if isearch-regexp isearch-string (regexp-quote isearch-string))))))

;; ==== Window switching ====
(global-set-key (kbd "M-'") 'other-window)
(global-set-key (kbd "H-'") 'other-window)
(global-set-key [C-tab] 'other-window)
(global-set-key [C-S-tab]
                (lambda ()
                  (interactive)
                  (other-window -1)))

;; ==== transpose buffers ====
(defun transpose-buffers (arg)
  "Transpose the buffers shown in two windows."
  (interactive "p")
  (let ((selector (if (>= arg 0) 'next-window 'previous-window)))
    (while (/= arg 0)
      (let ((this-win (window-buffer))
            (next-win (window-buffer (funcall selector))))
        (set-window-buffer (selected-window) next-win)
        (set-window-buffer (funcall selector) this-win)
        (select-window (funcall selector)))
      (setq arg (if (plusp arg) (1- arg) (1+ arg))))))

(global-set-key (kbd "C-x 4 t") 'transpose-buffers)

;; lisp stuff
(define-key lisp-mode-shared-map (kbd "RET") 'reindent-then-newline-and-indent)

(defun find-agent ()
  (first (split-string
          (shell-command-to-string
           (concat
            "ls -t1 "
            "$(find /tmp/ -uid $UID -path \\*ssh\\* -type s 2> /dev/null)"
            "|"
            "head -1")))))

(defun fix-agent ()
  (interactive)
  (let ((agent (find-agent)))
    (setenv "SSH_AUTH_SOCK" agent)
    (message agent)))

(defun beautify-json ()
  (interactive)
  (let ((b (if mark-active (min (point) (mark)) (point-min)))
        (e (if mark-active (max (point) (mark)) (point-max))))
    (shell-command-on-region b e
                             "python -mjson.tool" (current-buffer) t)))

(defun byte-recompile-init-files ()
  "Recompile all of the startup files"
  (interactive)
  (byte-recompile-directory "~/.emacs.d" 0))

(defun add-to-path (path-element)
  "Add the specified path element to the Emacs PATH"
  (interactive "DEnter directory to be added to path: ")
  (if (file-directory-p path-element)
      (setenv "PATH"
              (concat (expand-file-name path-element)
                      path-separator (getenv "PATH")))))

(defun untabify-buffer ()
  (interactive)
  (untabify (point-min) (point-max)))

(defun indent-buffer ()
  (interactive)
  (indent-region (point-min) (point-max)))

(defun cleanup-buffer ()
  "Perform a bunch of operations on the whitespace content of a buffer."
  (interactive)
  (indent-buffer)
  (untabify-buffer)
  (delete-trailing-whitespace))

(defun browse-last-url-in-brower ()
  (interactive)
  (save-excursion
    (let ((ffap-url-regexp
           (concat
            "\\("
            "news\\(post\\)?:\\|mailto:\\|file:"
            "\\|"
            "\\(ftp\\|https?\\|telnet\\|gopher\\|www\\|wais\\)://"
            "\\).")))
      (ffap-next t t))))

(global-set-key (kbd "C-c u") 'browse-last-url-in-brower)

(defun number-rectangle (start end format-string from)
  "Delete (don't save) text in the region-rectangle, then number it."
  (interactive
   (list (region-beginning) (region-end)
         (read-string "Number rectangle: "
                      (if (looking-back "^ *") "%d. " "%d"))
         (read-number "From: " 1)))
  (save-excursion
    (goto-char start)
    (setq start (point-marker))
    (goto-char end)
    (setq end (point-marker))
    (delete-rectangle start end)
    (goto-char start)
    (loop with column = (current-column)
          while (and (<= (point) end) (not (eobp)))
          for i from from   do
          (move-to-column column t)
          (insert (format format-string i))
          (forward-line 1)))
  (goto-char start))

(global-set-key (kbd "C-x r N") 'number-rectangle)

(defun my/insert-lod ()
  "Well. This is disappointing."
  (interactive)
  (insert "ಠ_ಠ"))

(global-set-key (kbd "C-c M-d") 'my/insert-lod)

(defun my/search-es-docs (text)
  "Search ES docs for `text'."
  (interactive (list (read-string "Search for: ")))
  (eww (url-encode-url
        (format "http://www.elasticsearch.org/?s=%s"
                text))))

(global-set-key (kbd "C-c d") 'my/search-es-docs)
(global-set-key (kbd "C-x d") 'my/search-es-docs)

;; keep customize settings in their own file
(setq custom-file "~/.emacs.d/custom.el")
(when (file-exists-p custom-file)
  (load custom-file))

;; Message how long it took to load everything (minus packages)
(let ((elapsed (float-time (time-subtract (current-time)
                                          emacs-start-time))))
  (message "Loading settings...done (%.3fs)" elapsed))
